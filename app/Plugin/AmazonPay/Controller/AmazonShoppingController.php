<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.3   |
    |              on 2020-11-16 14:57:02              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
namespace Plugin\AmazonPay\Controller;use Plugin\AmazonPay\Repository\ConfigRepository;use Plugin\AmazonPay\Service\AmazonOrderHelper;use Plugin\AmazonPay\Service\AmazonRequestService;use Plugin\AmazonPay\Service\Method\AmazonPay;use Eccube\Common\EccubeConfig;use Eccube\Controller\AbstractShoppingController;use Eccube\Entity\Order;use Eccube\Form\Type\Shopping\OrderType;use Eccube\Repository\CustomerRepository;use Eccube\Repository\Master\PrefRepository;use Eccube\Repository\ProductClassRepository;use Eccube\Repository\PluginRepository;use Eccube\Service\CartService;use Eccube\Service\MailService;use Eccube\Service\OrderHelper;use Eccube\Service\PurchaseFlow\PurchaseContext;use Eccube\Service\PurchaseFlow\PurchaseFlow;use Plugin\AmazonPay\Exception\AmazonPaymentException;use Sensio\Bundle\FrameworkExtraBundle\Configuration\Template;use Symfony\Component\Routing\Annotation\Route;use Symfony\Component\Form\FormInterface;use Symfony\Component\Form\FormError;use Symfony\Component\HttpFoundation\Request;use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;use Symfony\Component\Security\Core\Authentication\Token\UsernamePasswordToken;use Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorageInterface;use Symfony\Component\Security\Core\Encoder\EncoderFactoryInterface;use Symfony\Component\Routing\Generator\UrlGeneratorInterface;use Symfony\Component\Routing\RouterInterface;use Symfony\Component\Validator\Validator\ValidatorInterface;use Symfony\Component\Validator\Constraints as Assert;class AmazonShoppingController extends AbstractShoppingController{private $sessionAmazonProfileKey = 'amazon_pay.profile';private $sessionAmazonCustomerParamKey = 'amazon_pay.customer_regist';private $sessionAmazonCustomerErrorKey = 'amazon_pay.customer_regist_error';protected $validator;protected $cartService;protected $amazonOrderHelper;public function __construct(EccubeConfig $eccubeConfig, PurchaseFlow $cartPurchaseFlow, CartService $cartService, MailService $mailService, OrderHelper $orderHelper, CustomerRepository $customerRepository, PrefRepository $prefRepository, ProductClassRepository $productClassRepository, PluginRepository $pluginRepository, ConfigRepository $configRepository, AmazonOrderHelper $amazonOrderHelper, AmazonRequestService $amazonRequestService, ValidatorInterface $validator, EncoderFactoryInterface $encoderFactory, TokenStorageInterface $tokenStorage){goto zLIJK;V_f4M:$this->tokenStorage = $tokenStorage;goto sJK2c;jgCeX:$this->encoderFactory = $encoderFactory;goto V_f4M;kRP5p:$this->mailService = $mailService;goto laNTO;uikqQ:$this->prefRepository = $prefRepository;goto Et2bx;vyqdi:$this->amazonOrderHelper = $amazonOrderHelper;goto VzO_N;laNTO:$this->orderHelper = $orderHelper;goto nD17q;Nt6Zk:$this->validator = $validator;goto jgCeX;YzdoU:$this->cartService = $cartService;goto kRP5p;iIvSk:$this->Config = $configRepository->get();goto vyqdi;nD17q:$this->customerRepository = $customerRepository;goto uikqQ;zLIJK:$this->eccubeConfig = $eccubeConfig;goto Gc9Y2;VzO_N:$this->amazonRequestService = $amazonRequestService;goto Nt6Zk;nGjnI:$this->pluginRepository = $pluginRepository;goto iIvSk;Et2bx:$this->productClassRepository = $productClassRepository;goto nGjnI;Gc9Y2:$this->purchaseFlow = $cartPurchaseFlow;goto YzdoU;sJK2c:}    /**
     * @Route("/amazon_shopping", name="amazon_shopping")
     * @Template("Shopping/index.twig")
     *
     * @param Request $request
     */
public function index(Request $request, PurchaseFlow $cartPurchaseFlow){goto YjMv0;ZY0Ge:$this->setAmazonCustomerData($form, $arrAmazonCustomerParam);goto HK8IP;e96AA:$Customer = $this->getUser() ? $this->getUser() : $this->amazonOrderHelper->getOrderer();goto zzlXB;p72DV:ht2HJ:goto PAGZK;IgE52:goto AhGuN;goto JZUz7;vGjJy:GD6KE:goto lg6SQ;QH1Nw:Kl_La:goto KmBAX;CGDFO:return $this->redirectToRoute('cart');goto X68gw;qJEC5:$Order = $this->orderHelper->initializeOrder($Cart, $Customer);goto BVl7x;nVsvN:logs('amazon_pay')->info('AmazonShopping::index end.');goto gQoQk;wALIh:if (!$flowResult->hasError()) {goto BdRND;}goto cfgPP;JZUz7:Bzrqu:goto oJhnV;PYLb6:z80Yz:goto qJEC5;HK8IP:FObS2:goto FBsy8;KmBAX:AhGuN:goto hdl1D;ouNns:if ($Cart && $this->orderHelper->verifyCart($Cart)) {goto rmPoP;}goto CuIjA;PAGZK:$amazonOrderReferenceId = $request->get('amazonOrderReferenceId');goto nVsvN;Prr0j:$this->cartService->save();goto WZfO9;FBsy8:if (!($amazonCustomerError = $this->session->get($this->sessionAmazonCustomerErrorKey))) {goto ht2HJ;}goto Vd_Lf;Sbgx2:$arrAmazonCustomerParam['customer_regist'] = false;goto kX4LV;X68gw:rmPoP:goto X3eSe;FyjRW:return $this->redirectToRoute('shopping_error');goto yvKnt;XGFG2:$arrAmazonCustomerParam['mail_magazine'] = false;goto QH1Nw;yvKnt:BdRND:goto wmpCl;jg_yo:if ($this->isGranted('IS_AUTHENTICATED_FULLY')) {goto FObS2;}goto ZY0Ge;nYsM3:foreach ($arrAmazonCustomerError as $key => $val) {$form[$key]->addError(new FormError($val));cYpxL:}goto vGjJy;Vd_Lf:$arrAmazonCustomerError = unserialize($amazonCustomerError);goto nYsM3;X3eSe:logs('amazon_pay')->info('[注文手続] 受注の初期化処理を開始します.');goto e96AA;Cv9ee:$this->session->set(OrderHelper::SESSION_NON_MEMBER, $Customer);goto PYLb6;WZfO9:C6ddq:goto atSEm;wyAA9:$this->entityManager->flush();goto wALIh;s7MxG:$arrAmazonCustomerParam = ['customer_regist' => true, 'mail_magazine' => true, 'login_check' => 'regist', 'amazon_login_email' => null, 'amazon_login_password' => null];goto IgE52;oJhnV:$arrAmazonCustomerParam = unserialize($amazonCustomerParam);goto hZXlk;zzlXB:if ($this->isGranted('ROLE_USER')) {goto z80Yz;}goto Cv9ee;D33Zg:if (!empty($arrAmazonCustomerParam['mail_magazine'])) {goto Kl_La;}goto XGFG2;bAqfa:$Cart = $this->cartService->getCart();goto ouNns;YjMv0:logs('amazon_pay')->info('AmazonShopping::index start.');goto bAqfa;kX4LV:VHyC5:goto D33Zg;wmpCl:if (!$flowResult->hasWarning()) {goto C6ddq;}goto zSd88;FOrmQ:logs('amazon_pay')->info('[注文手続] 集計処理を開始します.', [$Order->getId()]);goto ZPTWb;BVl7x:$Order = $this->amazonOrderHelper->initializeAmazonOrder($Order, $Customer);goto FOrmQ;cfgPP:logs('amazon_pay')->info('[注文手続] Errorが発生したため購入エラー画面へ遷移します.', [$flowResult->getErrors()]);goto FyjRW;gQoQk:return ['form' => $form->createView(), 'Order' => $Order, 'init_flg' => $request->get('init_flg'), 'AmazonCustomer' => $arrAmazonCustomerParam, 'amazonOrderReferenceId' => $amazonOrderReferenceId];goto XS891;zSd88:logs('amazon_pay')->info('[注文手続] Warningが発生しました.', [$flowResult->getWarning()]);goto qMvfh;hdl1D:$form = $this->createForm(OrderType::class, $Order);goto jg_yo;ZPTWb:$flowResult = $this->executePurchaseFlow($Order, false);goto wyAA9;hZXlk:if (!empty($arrAmazonCustomerParam['customer_regist'])) {goto VHyC5;}goto Sbgx2;atSEm:if ($amazonCustomerParam = $this->session->get($this->sessionAmazonCustomerParamKey)) {goto Bzrqu;}goto s7MxG;CuIjA:logs('amazon_pay')->info('[注文手続] カートが購入フローへ遷移できない状態のため, カート画面に遷移します.');goto CGDFO;qMvfh:$cartPurchaseFlow->validate($Cart, new PurchaseContext());goto Prr0j;lg6SQ:$this->session->set($this->sessionAmazonCustomerErrorKey, null);goto p72DV;XS891:}    /**
     * 購入処理
     *
     * @Route("/amazon_shopping/confirm", name="amazon_shopping_confirm", methods={"POST"})
     * @Template("Shopping/confirm.twig")
     */
public function confirm(Request $request){goto SrScU;ZheFh:return $this->redirectToRoute('amazon_shopping');goto gYPoF;PRexb:if ($PaymentResult->isSuccess()) {goto NaBeK;}goto tjwBu;rgCAC:if (!($form->isSubmitted() && $form->isValid())) {goto Tl2jb;}goto TFfym;Ouva4:$this->setAmazonCustomerData($form, $arrAmazonCustomerParam);goto QbgvP;ciHtC:logs('amazon_pay')->info('[注文確認] フォームエラーのため, 注文手続画面を表示します.', [$Order->getId()]);goto s7HwX;qxxan:$amazonOrderReferenceId = $request->get('amazonOrderReferenceId');goto L_6uW;cAgiv:if (!$response) {goto E2zH6;}goto ZheFh;lDkMc:$Cart = $this->cartService->getCart();goto KIoZZ;rYL4q:pAZfY:goto jinjg;TjqNw:logs('amazon_pay')->info('[注文手続] カートが購入フローへ遷移できない状態のため, カート画面に遷移します.');goto KfiIm;nJm7K:$this->session->set($this->sessionAmazonCustomerErrorKey, serialize($arrAmazonCustomerError));goto T4uD4;KfiIm:return $this->redirectToRoute('cart');goto h2fKo;s7HwX:$request->attributes->set('_template', new Template(['template' => 'Shopping/index.twig']));goto jnz31;P_vFu:return $this->redirectToRoute('shopping_error');goto DeFqk;SrScU:logs('amazon_pay')->info('AmazonShopping::confirm start.');goto lDkMc;T4uD4:return $this->redirectToRoute('amazon_shopping');goto XpYwU;tKeap:NcIuV:goto rcLMw;tjwBu:$this->entityManager->rollback();goto AK8CA;Qf1r3:$Order = $this->orderHelper->getPurchaseProcessingOrder($preOrderId);goto P5ZVr;gYPoF:E2zH6:goto p59sT;T5CY7:return $response;goto uKfM_;sT8We:return $this->redirectToRoute('amazon_shopping');goto tIFCQ;fk2sg:$this->session->set($this->sessionAmazonCustomerParamKey, serialize($arrAmazonCustomerParam));goto rTnQe;X3n5q:$response = $this->executePurchaseFlow($Order);goto Lgc3W;gN4gV:logs('amazon_pay')->info('[リダイレクト] 購入処理中の受注が存在しません.');goto P_vFu;OlKs8:if ($this->isGranted('IS_AUTHENTICATED_FULLY')) {goto pCuue;}goto Ouva4;Kkn0J:$response = $PaymentResult->getResponse();goto fhKrB;R9_hV:logs('amazon_pay')->info('[注文確認] 注文確認画面を表示します.');goto qxxan;Eqw7o:if (!($arrAmazonCustomerError = $this->checkAmazonCustomerError($request, $form, $Order))) {goto XmfCa;}goto nJm7K;AK8CA:foreach ($PaymentResult->getErrors() as $error) {$this->addError($error);Q7vzt:}goto tKeap;rcLMw:logs('amazon_pay')->info('[注文確認] PaymentMethod::verifyのエラーのため, 注文手続き画面へ遷移します.', [$PaymentResult->getErrors()]);goto sT8We;SysfJ:Tl2jb:goto ciHtC;x8y2a:$PaymentResult = $paymentMethod->verify();goto Qni8Q;L_6uW:return ['form' => $form->createView(), 'Order' => $Order, 'amazonOrderReferenceId' => $amazonOrderReferenceId];goto SysfJ;p59sT:logs('amazon_pay')->info('[注文確認] PaymentMethod::verifyを実行します.', [$Order->getPayment()->getMethodClass()]);goto umGmA;fhKrB:if (!($response && ($response->isRedirection() || $response->getContent()))) {goto s5tcr;}goto K_rqk;K_rqk:$this->entityManager->flush();goto MDAHA;TFfym:logs('amazon_pay')->info('[注文確認] 集計処理を開始します.', [$Order->getId()]);goto X3n5q;zgwup:$form->handleRequest($request);goto Eqw7o;Lgc3W:$this->entityManager->flush();goto cAgiv;P5ZVr:if ($Order) {goto QpVgj;}goto gN4gV;RzWh0:$preOrderId = $this->cartService->getPreOrderId();goto Qf1r3;jinjg:$this->entityManager->flush();goto R9_hV;DeFqk:QpVgj:goto oWWmY;umGmA:$paymentMethod = $this->createPaymentMethod($Order, $form);goto x8y2a;MDAHA:logs('amazon_pay')->info('[注文確認] PaymentMethod::verifyが指定したレスポンスを表示します.');goto T5CY7;Qni8Q:if (!$PaymentResult) {goto pAZfY;}goto PRexb;oWWmY:$arrAmazonCustomerParam = $this->getAmazonCustomerParam($request);goto fk2sg;h2fKo:lMTO4:goto RzWh0;XpYwU:XmfCa:goto rgCAC;QbgvP:pCuue:goto zgwup;uKfM_:s5tcr:goto rYL4q;rTnQe:$form = $this->createForm(OrderType::class, $Order);goto OlKs8;tIFCQ:NaBeK:goto Kkn0J;jnz31:return ['form' => $form->createView(), 'Order' => $Order];goto GuI9E;KIoZZ:if ($Cart && $this->orderHelper->verifyCart($Cart)) {goto lMTO4;}goto TjqNw;GuI9E:}    /**
     * 購入処理
     *
     * @Route("/amazon_shopping/checkout", name="amazon_shopping_checkout", methods={"POST"})
     * @Template("Shopping/index.twig")
     */
public function checkout(Request $request){goto VRpV2;JWr4c:if ($this->isGranted('IS_AUTHENTICATED_FULLY')) {goto ofRFH;}goto R6jeH;gZcDV:qE9Bd:goto qP792;E2Qef:$form = $this->createForm(OrderType::class, $Order, ['skip_add_form' => true]);goto A8KiN;sb2zG:if (!($arrAmazonCustomerError = $this->checkAmazonCustomerError($request, $form, $Order))) {goto Uk9w1;}goto UCJWD;nAwrb:$form->handleRequest($request);goto QDwEf;lLyXf:$Order = $this->orderHelper->getPurchaseProcessingOrder($preOrderId);goto B8y51;YdOP8:$Order->appendCompleteMailMessage("特記事項：" . $this->Config->getMailNotices());goto gZcDV;B8y51:if ($Order) {goto TU3UN;}goto a9Zj3;RpceZ:try {goto eDdqK;D1on0:if (!($response = $this->executeCheckout($paymentMethod))) {goto Y5GSx;}goto wpj5N;kXsXw:if ($Customer->getAmazonUserId()) {goto AJ2sa;}goto KnJIM;zLYZo:BICrF:goto xc3Zk;jNT70:xMU8l:goto cJGcs;Ik95L:AJ2sa:goto Dpqeb;mULEg:$this->setLogin($request, $Order);goto lIifE;C3Pri:if ($this->isGranted('IS_AUTHENTICATED_FULLY')) {goto xMU8l;}goto aEXwO;GwriT:$Customer = $this->getUser();goto FraS0;j9O00:if (!$response) {goto h171q;}goto RTNPz;YM285:            $mail_message = <<<__EOS__
************************************************
　会員登録情報
************************************************
マイページURL：{$url}
※会員登録済みです。メールアドレスは{$mail}です。

__EOS__;
goto K5PN1;FyrrI:$amazonOrderReferenceId = $request->get('amazonOrderReferenceId');goto Twj1V;Dpqeb:nRt_X:goto JUTWS;gLYZO:QznCB:goto OYGtK;xc3Zk:logs('amazon_pay')->info('[注文処理] PaymentMethod::checkoutを実行します.');goto D1on0;OYGtK:ZGEg2:goto nXiAI;wpj5N:return $response;goto BXBwE;KnJIM:$Customer->setAmazonUserId($profile->user_id);goto Ik95L;Twj1V:$paymentMethod = $this->createPaymentMethod($Order, $form, $amazonOrderReferenceId);goto DjU2W;JUTWS:logs('amazon_pay')->info('購入処理開始', [$Order->getId()]);goto aCYOh;eDdqK:$profile = unserialize($this->session->get($this->sessionAmazonProfileKey));goto C3Pri;aCYOh:$response = $this->executePurchaseFlow($Order);goto YHfrP;FraS0:$Order->setCustomer($Customer);goto KVjFT;YHfrP:$this->entityManager->flush();goto j9O00;aEXwO:if (empty($arrAmazonCustomerParam['login_check']) || $arrAmazonCustomerParam['login_check'] == 'regist') {goto i28Yz;}goto ySyFj;OG8Kh:w_nGC:goto yKFzA;czrr7:goto ZGEg2;goto y9wtP;OCQIG:return $response;goto zLYZo;eQGk5:logs('amazon_pay')->info('購入処理完了', [$Order->getId()]);goto WIOHg;FSxiw:if (!$arrAmazonCustomerParam['customer_regist']) {goto QznCB;}goto y4zwY;KVjFT:$mail = $Customer->getEmail();goto MiFY4;MiEGN:h171q:goto FyrrI;yKFzA:$mail = $Order->getEmail();goto YM285;K5PN1:x4QiZ:goto PHB19;uaF1h:if ($this->customerRepository->getNonWithdrawingCustomers(['email' => $Order->getEmail()]) || $this->customerRepository->getNonWithdrawingCustomers(['amazon_user_id' => $profile->user_id])) {goto w_nGC;}goto Vlrnh;y4zwY:$url = $this->generateUrl('mypage_login', [], UrlGeneratorInterface::ABSOLUTE_URL);goto uaF1h;cJGcs:$Customer = $this->getUser();goto kXsXw;Vlrnh:$password = $this->amazonOrderHelper->registCustomer($Order, $arrAmazonCustomerParam['mail_magazine']);goto GwriT;O1D0o:logs('amazon_pay')->info('[注文処理] 注文処理が完了しました.', [$Order->getId()]);goto eQGk5;ySyFj:if (!($arrAmazonCustomerParam['login_check'] == 'login')) {goto cWfGt;}goto mULEg;BXBwE:Y5GSx:goto Jw7Ih;RTNPz:return $this->redirectToRoute('amazon_shopping');goto MiEGN;lIifE:cWfGt:goto czrr7;y9wtP:i28Yz:goto FSxiw;Jw7Ih:$this->entityManager->flush();goto O1D0o;PHB19:$Order->setCompleteMailMessage($mail_message);goto gLYZO;MiFY4:            $mail_message = <<<__EOS__
************************************************
　会員登録情報
************************************************
マイページURL：{$url}
ログインメールアドレス：{$mail}
初期パスワード：{$password}

__EOS__;
goto czYhm;nXiAI:goto nRt_X;goto jNT70;czYhm:goto x4QiZ;goto OG8Kh;DjU2W:if (!($response = $paymentMethod->apply())) {goto BICrF;}goto OCQIG;WIOHg:} catch (ShoppingException $e) {goto i86eN;i86eN:logs('amazon_pay')->error('購入エラー', [$e->getMessage()]);goto kknNL;kknNL:$this->entityManager->getConnection()->rollback();goto TE6eI;H9jYQ:$this->addError($e->getMessage());goto dVJPI;dVJPI:return $this->redirectToRoute('shopping_error');goto cA8DY;TE6eI:$this->log($e);goto H9jYQ;cA8DY:} catch (AmazonPaymentException $e) {goto F8419;ZvLPD:logs('amazon_pay')->error($e->getMessage(), [$Order->getId()]);goto sBfyH;sBfyH:$this->entityManager->getConnection()->rollback();goto Gi2FW;Gi2FW:return $this->redirectToRoute('shopping_error');goto g8Ofh;F8419:$this->addError($e->getMessage());goto ZvLPD;g8Ofh:} catch (\Exception $e) {goto nNxYt;RoiAs:$this->entityManager->getConnection()->rollback();goto W14Th;W14Th:return $this->redirectToRoute('shopping_error');goto lUxoY;qXMa8:logs('amazon_pay')->error('予期しないエラー', [$e->getMessage()]);goto RoiAs;nNxYt:$this->addError('front.shopping.system_error');goto qXMa8;lUxoY:}goto R0diG;qP792:$this->mailService->sendOrderMail($Order);goto nwu8l;R0diG:logs('amazon_pay')->info('AmazonShopping::complete_order end.');goto XyW8U;xRgkE:$amazonCustomerParam = $this->session->get($this->sessionAmazonCustomerParamKey);goto onoa5;QDwEf:if ($this->Config->getUseConfirmPage() == $this->eccubeConfig['amazon_pay']['toggle']['on']) {goto rQrWI;}goto sb2zG;I9qEj:$arrAmazonCustomerParam = $this->getAmazonCustomerParam($request);goto MiI3c;JoCXq:TU3UN:goto VBbb_;aNs9P:Uk9w1:goto aZZJT;oUu14:if ($Cart && $this->orderHelper->verifyCart($Cart)) {goto wsbYT;}goto V5GsH;Xmy_O:return $this->redirectToRoute('shopping_complete');goto tGH4B;Vt16B:if (!($form->isSubmitted() && $form->isValid())) {goto eo2_m;}goto RpceZ;nh4Bn:ofRFH:goto nAwrb;D_YcG:CXqxN:goto JWr4c;M40Nm:if (is_null($this->Config->getMailNotices())) {goto qE9Bd;}goto YdOP8;ayHkZ:$this->session->set($this->sessionAmazonCustomerParamKey, null);goto ZTj4j;bP72Q:return $this->redirectToRoute('cart');goto YnATp;fyjoy:return $this->redirectToRoute('shopping_error');goto JoCXq;VRpV2:logs('amazon_pay')->info('AmazonShopping::order start.');goto zc_nN;YnATp:wsbYT:goto aUskB;tGH4B:eo2_m:goto cw0LW;UCJWD:$this->session->set($this->sessionAmazonCustomerErrorKey, serialize($arrAmazonCustomerError));goto k_kc9;cyXQO:$this->cartService->clear();goto ayHkZ;A8KiN:goto CXqxN;goto CE2r7;AIu8s:$form = $this->createForm(OrderType::class, $Order);goto D_YcG;cw0LW:logs('amazon_pay')->info('購入チェックエラー', [$Order->getId()]);goto FWrpG;onoa5:$arrAmazonCustomerParam = unserialize($amazonCustomerParam);goto E2Qef;VBbb_:if ($this->Config->getUseConfirmPage() == $this->eccubeConfig['amazon_pay']['toggle']['off']) {goto t9rJt;}goto xRgkE;FWrpG:return ['form' => $form->createView(), 'Order' => $Order, 'init_flg' => false];goto hHQAk;nwu8l:$this->entityManager->flush();goto i43xU;fdK0m:logs('amazon_pay')->info('[注文処理] 注文メールの送信を行います.', [$Order->getId()]);goto M40Nm;a9Zj3:logs('amazon_pay')->info('[リダイレクト] 購入処理中の受注が存在しません.');goto fyjoy;aUskB:$preOrderId = $this->cartService->getPreOrderId();goto lLyXf;k_kc9:return $this->redirectToRoute('amazon_shopping');goto aNs9P;zc_nN:$Cart = $this->cartService->getCart();goto oUu14;vtQIc:rQrWI:goto QHPcT;QHPcT:PNPqM:goto Vt16B;MiI3c:$this->session->set($this->sessionAmazonCustomerParamKey, serialize($arrAmazonCustomerParam));goto AIu8s;XyW8U:$this->session->set(OrderHelper::SESSION_ORDER_ID, $Order->getId());goto fdK0m;i43xU:logs('amazon_pay')->info('[注文処理] カートをクリアします.', [$Order->getId()]);goto cyXQO;V5GsH:logs('amazon_pay')->info('[注文手続] カートが購入フローへ遷移できない状態のため, カート画面に遷移します.');goto bP72Q;aZZJT:goto PNPqM;goto vtQIc;ZTj4j:$this->session->set($this->sessionAmazonCustomerErrorKey, null);goto ltk1C;ltk1C:logs('amazon_pay')->info('[注文処理] 注文処理が完了しました. 購入完了画面へ遷移します.', [$Order->getId()]);goto Xmy_O;CE2r7:t9rJt:goto I9qEj;R6jeH:$this->setAmazonCustomerData($form, $arrAmazonCustomerParam);goto nh4Bn;hHQAk:}    /**
     * 購入確認画面から, 他の画面へのリダイレクト.
     * 配送業者や支払方法、お問い合わせ情報をDBに保持してから遷移する.
     *
     * @Route("/amazon_shopping/redirect_to", name="amazon_shopping_redirect_to", methods={"POST"})
     * @Template("Shopping/index.twig")
     */
public function redirectTo(Request $request, RouterInterface $router){goto qb7AD;GC14K:$redirectTo = $form['redirect_to']->getData();goto oSdXz;h2vAK:h_jE5:goto i4iGl;slkhu:logs('amazon_pay')->info('[リダイレクト] フォームエラーのため, 注文手続き画面を表示します.', [$Order->getId()]);goto cYhVK;L1cPm:logs('amazon_pay')->info('Errorが発生したため購入エラー画面へ遷移します.', [$flowResult->getErrors()]);goto rbFL9;PiJmp:$form = $this->createForm(OrderType::class, $Order);goto QbzTw;zG_0a:return $this->redirectToRoute('shopping_error');goto kwuEt;C8Mpv:$Order = $this->orderHelper->getPurchaseProcessingOrder($preOrderId);goto hb7wt;ygf3O:if (!$flowResult->hasError()) {goto YOPtf;}goto L1cPm;qBP7F:logs('amazon_pay')->info('[リダイレクト] 集計処理を開始します.', [$Order->getId()]);goto Bimxg;DW1fg:BsYvm:goto slkhu;SwwZ4:return $this->redirectToRoute('amazon_shopping');goto lLong;rbFL9:return $this->redirectToRoute('shopping_error');goto mox52;lYyeB:logs('amazon_pay')->info('[リダイレクト] リダイレクト先未指定のため注文手続き画面へ遷移します.');goto wjsap;qb7AD:$preOrderId = $this->cartService->getPreOrderId();goto C8Mpv;kwuEt:xeWyW:goto PiJmp;Bimxg:$flowResult = $this->executePurchaseFlow($Order, false);goto hcyUG;QbzTw:$form->handleRequest($request);goto Llxhs;hcyUG:$this->entityManager->flush();goto ygf3O;Llxhs:if (!($form->isSubmitted() && $form->isValid())) {goto BsYvm;}goto qBP7F;mox52:YOPtf:goto sIAko;lLong:yFE0P:goto GC14K;oSdXz:if (!empty($redirectTo)) {goto h_jE5;}goto lYyeB;TXgsG:logs('amazon_pay')->info('[リダイレクト] 購入処理中の受注が存在しません.');goto zG_0a;wjsap:return $this->redirectToRoute('amazon_shopping');goto h2vAK;hb7wt:if ($Order) {goto xeWyW;}goto TXgsG;i4iGl:try {goto CPpl3;f1Em4:$redirectTo = preg_replace($pattern, '', $redirectTo);goto s9KkG;CPpl3:$pattern = '/^' . preg_quote($request->getBasePath(), '/') . '/';goto f1Em4;F1Ixh:return $this->forwardToRoute($result['_route']);goto hQlyx;s9KkG:$result = $router->match($redirectTo);goto F1Ixh;hQlyx:} catch (\Exception $e) {logs('amazon_pay')->info('[リダイレクト] URLの形式が不正です', [$redirectTo, $e->getMessage()]);return $this->redirectToRoute('shopping_error');}goto DW1fg;p4FNA:logs('amazon_pay')->info('Warningが発生したため注文手続き画面へ遷移します.', [$flowResult->getWarning()]);goto SwwZ4;cYhVK:return ['form' => $form->createView(), 'Order' => $Order];goto sI2TM;sIAko:if (!$flowResult->hasWarning()) {goto yFE0P;}goto p4FNA;sI2TM:}    /**
     * 住所取得
     *
     * @Route("/amazon_shopping/address", name="amazon_shopping_address")
     * @Template("Shopping/index.twig")
     */
public function address(Request $request){goto Tk4T0;bvV0V:fwWfI:goto cOFF_;jQcDl:ZbR_X:goto HwlFn;Mfz27:$arrAmazonCustomerParam = $this->getAmazonCustomerParam($request);goto iidmv;JGAF4:if ($Order) {goto cv0Aj;}goto jccAx;cOFF_:$this->entityManager->flush();goto Mfz27;ymI60:ldgty:goto Uj3hf;mODnP:logs('amazon_pay')->info('購入処理中の受注情報がないため購入エラー');goto coEG4;Tk4T0:$preOrderId = $this->cartService->getPreOrderId();goto dOw12;zRgdB:return $this->redirectToRoute('amazon_shopping', ['amazonOrderReferenceId' => $amazonOrderReferenceId]);goto GrxHt;ou4hW:cv0Aj:goto p2IU6;B580Z:foreach ($Shippings as $key => $Shipping) {$this->amazonOrderHelper->convertAddress($Order, $Shippings[$key], $arrAmznAddr);aIv6Y:}goto jQcDl;w4D9n:$this->amazonOrderHelper->copyToOrderFromShipping($Order, $Shippings[0]);goto bvV0V;jccAx:logs('amazon_pay')->info('[リダイレクト] 購入処理中の受注が存在しません.');goto k3tKi;coEG4:$this->addError('front.shopping.order.error');goto ReSfq;iidmv:$this->session->set($this->sessionAmazonCustomerParamKey, serialize($arrAmazonCustomerParam));goto zRgdB;YouDD:$amazonOrderReferenceId = $request->get('amazonOrderReferenceId');goto yV39r;HwlFn:if ($this->isGranted('IS_AUTHENTICATED_FULLY')) {goto fwWfI;}goto w4D9n;ReSfq:return $this->redirectToRoute('shopping_error');goto ymI60;dOw12:$Order = $this->orderHelper->getPurchaseProcessingOrder($preOrderId);goto JGAF4;p2IU6:logs('amazon_pay')->info('AmazonShopping::redirect_to_change address.');goto YouDD;myGsh:$Shippings = $Order->getShippings();goto B580Z;yV39r:$addressConsentToken = $request->get('addressConsentToken');goto l83H2;l83H2:if (!(empty($amazonOrderReferenceId) || empty($addressConsentToken))) {goto ldgty;}goto mODnP;Uj3hf:$arrAmznAddr = $this->amazonRequestService->getDeliveryAddress($amazonOrderReferenceId, $addressConsentToken);goto myGsh;k3tKi:return $this->redirectToRoute('shopping_error');goto ou4hW;GrxHt:}    /**
     * @Route("/amazon_shopping/is_reload", name="amazon_shopping_is_reload")
     */
public function isReload(Request $request){goto PhPif;k1lXu:$PreShipping = clone $Order->getShippings()->first();goto qrgmT;Nfhmn:$preOrderId = $this->cartService->getPreOrderId();goto tuU5V;LR7lM:oM0nt:goto Nfhmn;M4W3y:GlLw0:goto jNgGd;Nd4Ne:$amazonOrderReferenceId = $request->get('amazonOrderReferenceId');goto YZ5L4;NMNoN:logs('amazon_pay')->info('購入処理中の受注情報がないため購入エラー');goto Nw0RD;PhPif:$reload = 'off';goto Nd4Ne;jNgGd:return $this->json(['is_reload' => $reload]);goto qc5Ok;qrgmT:$Shippings = clone $Order->getShippings();goto Wejpe;Nw0RD:throw new NotFoundHttpException();goto LR7lM;C0eH6:$reload = 'on';goto M4W3y;w1MiL:if (!($PreShipping->getPostalCode() !== $Shippings->first()->getPostalCode() || $PreShipping->getPref() !== $Shippings->first()->getPref() || $PreShipping->getAddr01() !== $Shippings->first()->getAddr01() || $PreShipping->getAddr02() !== $Shippings->first()->getAddr02() || $PreShipping->getPhoneNumber() !== $Shippings->first()->getPhoneNumber() || "{$PreShipping->getName01()}{$PreShipping->getName02()}" !== "{$Shippings->first()->getName01()}{$Shippings->first()->getName02()}")) {goto GlLw0;}goto C0eH6;pQK4X:foreach ($Shippings as $key => $_) {$this->amazonOrderHelper->convertAddress($Order, $Shippings[$key], $arrAmznAddr);McHFU:}goto A1T47;Wejpe:$arrAmznAddr = $this->amazonRequestService->getDeliveryAddress($amazonOrderReferenceId, $addressConsentToken);goto pQK4X;tuU5V:$Order = $this->orderHelper->getPurchaseProcessingOrder($preOrderId);goto k1lXu;A1T47:JDMng:goto w1MiL;Oeku4:if (!(empty($amazonOrderReferenceId) || empty($addressConsentToken))) {goto oM0nt;}goto NMNoN;YZ5L4:$addressConsentToken = $request->get('addressConsentToken');goto Oeku4;qc5Ok:}private function createPaymentMethod(Order $Order, FormInterface $form, $amazonOrderReferenceId = null){goto zj0Lo;F0D4W:$PaymentMethod->setOrder($Order);goto k4uEF;zj0Lo:$PaymentMethod = $this->container->get($Order->getPayment()->getMethodClass());goto F0D4W;K3NFf:$PaymentMethod->setAmazonOrderReferenceId($amazonOrderReferenceId);goto S642y;S642y:bONlO:goto uw4jG;k4uEF:$PaymentMethod->setFormType($form);goto b23ky;uw4jG:return $PaymentMethod;goto I0VL2;b23ky:if (is_null($amazonOrderReferenceId)) {goto bONlO;}goto K3NFf;I0VL2:}protected function executeCheckout(AmazonPay $paymentMethod){goto Yn3cl;Ss71F:return $this->redirectToRoute('shopping_error');goto TPZv3;Yn3cl:$PaymentResult = $paymentMethod->checkout();goto qXQr4;TPZv3:jSlji:goto wQC0N;BoYQo:if (!($response && ($response->isRedirection() || $response->getContent()))) {goto PcY6L;}goto TNaEO;Dbnwp:foreach ($PaymentResult->getErrors() as $error) {$this->addError($error);fKpWk:}goto fT2mK;DECGK:PcY6L:goto fY7OS;fT2mK:Fv0VA:goto wd_f5;JdLAs:$this->entityManager->rollback();goto Dbnwp;imjY6:return $response;goto DECGK;qXQr4:$response = $PaymentResult->getResponse();goto BoYQo;up5p2:logs('amazon_pay')->info('[注文処理] PaymentMethod::checkoutが指定したレスポンスを表示します.');goto imjY6;fY7OS:if ($PaymentResult->isSuccess()) {goto jSlji;}goto JdLAs;wd_f5:logs('amazon_pay')->info('[注文処理] PaymentMethod::checkoutのエラーのため, 購入エラー画面へ遷移します.', [$PaymentResult->getErrors()]);goto Ss71F;TNaEO:$this->entityManager->flush();goto up5p2;wQC0N:}private function getAmazonCustomerParam($request){goto fXMTo;H3KCn:$amazon_login_email = empty($request->get('_shopping_order')['amazon_login_email']) ? null : $request->get('_shopping_order')['amazon_login_email'];goto ddKuC;LQEFU:$login_check = empty($request->get('_shopping_order')['login_check']) ? null : $request->get('_shopping_order')['login_check'];goto H3KCn;mQFd3:return ['customer_regist' => $customer_regist, 'mail_magazine' => $mail_magazine, 'login_check' => $login_check, 'amazon_login_email' => $amazon_login_email, 'amazon_login_password' => $amazon_login_password];goto e4wxY;ddKuC:$amazon_login_password = empty($request->get('_shopping_order')['amazon_login_password']) ? null : $request->get('_shopping_order')['amazon_login_password'];goto mQFd3;fXMTo:$customer_regist = empty($request->get('_shopping_order')['customer_regist']) ? false : true;goto B5eEg;B5eEg:$mail_magazine = empty($request->get('_shopping_order')['mail_magazine']) ? false : true;goto LQEFU;e4wxY:}private function checkAmazonCustomerError($request, $form, $Order){goto KlPIg;Fttht:$arrError['amazon_login_password'] = '※ パスワードが' . $amazon_login_password_error;goto VckmQ;oyDMy:CLy5t:goto N7tz2;Zh2nH:if (empty($amazon_login_email_error)) {goto CLy5t;}goto tF4yJ;tF4yJ:$arrError['amazon_login_email'] = '※ メールアドレスが' . $amazon_login_email_error;goto oyDMy;l3Qx2:$amazon_login_email_error = '';goto u6WQ4;pklHc:$arrError['customer_regist'] = '※ 会員登録済みです。メールアドレスは' . $Order->getEmail() . 'です。';goto RXEbP;KGu6D:goto PY3Zs;goto Xz558;vmT0h:goto J4NMA;goto rsYtX;ZNlYL:goto Yv6AD;goto jc00s;XOTvy:PY3Zs:goto JxyBC;JxyBC:J4NMA:goto bhsOJ;VB0FT:if ($login_check == 'regist') {goto LjT93;}goto ug9t3;bhsOJ:EdmWj:goto kJdQG;kJdQG:AfpZX:goto Q8H0P;ug9t3:if (!($login_check == 'login')) {goto mj_F4;}goto x2GBL;MT6DD:if (!(!$this->isGranted('IS_AUTHENTICATED_FULLY') && $this->Config->getLoginRequired() == $this->eccubeConfig['amazon_pay']['toggle']['on'])) {goto AfpZX;}goto t1w9p;VLwOE:BqX4p:goto p4qxd;OKO_7:$login_check = $form['login_check']->getData();goto VB0FT;NRwig:$arrError['customer_regist'] = '※ このAmazonアカウントで既に会員登録済みです。メールアドレスは' . $AmazonCustomer[0]->getEmail() . 'です。';goto CVa5N;H1eFM:AmNIk:goto ZNlYL;efyuZ:$Customer = $this->customerRepository->getNonWithdrawingCustomers(['email' => $Order->getEmail()]);goto vN1je;PgmR8:if (!empty($Customer[0])) {goto FtFGc;}goto iktak;jc00s:rLwVb:goto PHMMi;u6WQ4:foreach ($violations as $violation) {$amazon_login_email_error .= $violation->getMessage() . PHP_EOL;QMwVT:}goto KnBWk;vN1je:$profile = unserialize($this->session->get($this->sessionAmazonProfileKey));goto gNJGR;N7tz2:$violations = $this->validator->validate($form['amazon_login_password']->getData(), [new Assert\NotBlank()]);goto rbTwd;XZLUO:FtFGc:goto pklHc;KnBWk:PG4w7:goto Zh2nH;XIAws:rPk1E:goto AI44f;ljHV0:goto phPoq;goto XZLUO;Q8H0P:return $arrError;goto Jf8h3;Xz558:lcGWv:goto rwLJD;gNJGR:$AmazonCustomer = $this->customerRepository->getNonWithdrawingCustomers(['amazon_user_id' => $profile->user_id]);goto PgmR8;CVa5N:Lcdj7:goto ljHV0;VckmQ:T6w_g:goto t6lRC;CJ2Wi:$salt = $Customer[0]->getSalt();goto QZG97;x2GBL:$violations = $this->validator->validate($form['amazon_login_email']->getData(), [new Assert\NotBlank(), new Assert\Email()]);goto l3Qx2;RXEbP:phPoq:goto KGu6D;bpGc8:if (empty($form['customer_regist']->getData())) {goto lcGWv;}goto efyuZ;p4qxd:if (empty($amazon_login_password_error)) {goto T6w_g;}goto Fttht;QZG97:$customerPassword = $Customer[0]->getPassword();goto LO8h9;rwLJD:$arrError['customer_regist'] = '※ 会員登録が選択されていません。';goto XOTvy;XVbka:if (!('POST' === $request->getMethod() && strpos($request_uri, 'amazon_shopping/address') === false && strpos($request_uri, 'amazon_shopping/delivery') === false)) {goto EdmWj;}goto OKO_7;rbTwd:$amazon_login_password_error = '';goto jZN3u;rsYtX:LjT93:goto bpGc8;dYkch:$Customer = $this->customerRepository->getNonWithdrawingCustomers(['email' => $form['amazon_login_email']->getData()]);goto gWv9z;gWv9z:if (empty($Customer[0])) {goto rLwVb;}goto yZFFg;KlPIg:$arrError = [];goto MT6DD;AI44f:mj_F4:goto vmT0h;jZN3u:foreach ($violations as $violation) {$amazon_login_password_error .= $violation->getMessage() . PHP_EOL;Mja53:}goto VLwOE;mrnLf:$arrError['amazon_login_email'] = '※ メールアドレスまたはパスワードが正しくありません。';goto H1eFM;yZFFg:$encoder = $this->encoderFactory->getEncoder($Customer[0]);goto CJ2Wi;pXjTj:Yv6AD:goto XIAws;LO8h9:if ($encoder->isPasswordValid($customerPassword, $form['amazon_login_password']->getData(), $salt)) {goto AmNIk;}goto mrnLf;t6lRC:if (!(empty($login_check_error) && empty($amazon_login_email_error) && empty($amazon_login_password_error))) {goto rPk1E;}goto dYkch;PHMMi:$arrError['amazon_login_email'] = '※ メールアドレスまたはパスワードが正しくありません。';goto pXjTj;t1w9p:$request_uri = $request->getUri();goto XVbka;iktak:if (empty($AmazonCustomer[0])) {goto Lcdj7;}goto NRwig;Jf8h3:}private function setLogin($request, $Order){goto qzbjb;j_JTn:$Order->setCustomer($Customer[0]);goto DVVJz;Qygzc:$this->tokenStorage->setToken($token);goto el7Wi;DVVJz:$token = new UsernamePasswordToken($Customer[0], null, 'customer', ['ROLE_USER']);goto Qygzc;el7Wi:$this->amazonOrderHelper->copyToOrderFromCustomer($Order, $Customer[0]);goto TdPm9;qzbjb:$Customer = $this->customerRepository->getNonWithdrawingCustomers(['email' => $Order->getEmail()]);goto j_JTn;TdPm9:}private function setAmazonCustomerData($form, $arrAmazonCustomerParam){goto gzyBd;A1fOy:z_hj1:goto eY6qc;z5jvQ:if (!$this->pluginRepository->findOneBy(['code' => 'MailMagazine4', 'enabled' => true])) {goto z_hj1;}goto Pl69_;FV2q5:pS7hp:goto Dl3rN;Pl69_:$form->get('mail_magazine')->setData($arrAmazonCustomerParam['mail_magazine']);goto A1fOy;gzyBd:$form->get('customer_regist')->setData($arrAmazonCustomerParam['customer_regist']);goto z5jvQ;hEGP9:$form->get('amazon_login_password')->setData($arrAmazonCustomerParam['amazon_login_password']);goto FV2q5;CRlH9:$form->get('login_check')->setData($arrAmazonCustomerParam['login_check']);goto vt2xc;eY6qc:if (!($this->Config->getLoginRequired() == $this->eccubeConfig['amazon_pay']['toggle']['on'] && !$this->isGranted('IS_AUTHENTICATED_FULLY'))) {goto pS7hp;}goto CRlH9;vt2xc:$form->get('amazon_login_email')->setData($arrAmazonCustomerParam['amazon_login_email']);goto hEGP9;Dl3rN:}}