<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.3   |
    |              on 2020-11-16 14:57:02              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
namespace Plugin\AmazonPay\Service;use Doctrine\ORM\EntityManagerInterface;use Eccube\Common\EccubeConfig;use Eccube\Repository\CustomerRepository;use Eccube\Service\CartService;use Eccube\Service\PurchaseFlow\PurchaseContext;use Eccube\Service\PurchaseFlow\PurchaseFlow;use Plugin\AmazonPay\Exception\AmazonPaymentException;use Plugin\AmazonPay\Repository\ConfigRepository;use GuzzleHttp\Client;use Guzzle\Http\Exception\BadResponseException;use Guzzle\Http\Exception\CurlException;use Symfony\Component\HttpFoundation\Request;use Symfony\Component\HttpFoundation\Session\Session;use Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorageInterface;use Symfony\Component\Security\Core\Authentication\Token\UsernamePasswordToken;use Carbon\Carbon;class AmazonRequestService{protected $entityManager;protected $customerRepository;protected $cartService;protected $purchaseFlow;protected $eccubeConfig;protected $configRepository;protected $Config;protected $amazonApi;protected $amazonApiConfig;protected $session;protected $tokenStorage;public function __construct(EntityManagerInterface $entityManager, CustomerRepository $customerRepository, CartService $cartService, PurchaseFlow $cartPurchaseFlow, EccubeConfig $eccubeConfig, ConfigRepository $configRepository, Session $session, TokenStorageInterface $tokenStorage){goto G7mOY;knVBk:$this->purchaseFlow = $cartPurchaseFlow;goto YZOA5;GSAXe:$this->Config = $this->configRepository->get();goto OD4gX;KjbGe:$this->session = $session;goto P9qbH;SpO6p:$this->amazonApi = $this->eccubeConfig['amazon_pay']['api']['sandbox'];goto SSwqF;P9qbH:$this->tokenStorage = $tokenStorage;goto GSAXe;yHnZA:$this->amazonApiConfig = $this->eccubeConfig['amazon_pay']['api']['config'];goto PERyI;OD4gX:if ($this->Config->getAmazonAccountMode() == $this->eccubeConfig['amazon_pay']['account_mode']['owned'] && $this->Config->getEnv() == $this->eccubeConfig['amazon_pay']['env']['prod']) {goto xUMBb;}goto SpO6p;K2YYP:xUMBb:goto OGlbu;OxKH8:vuCGV:goto yHnZA;AH345:$this->cartService = $cartService;goto knVBk;zs8PH:$this->configRepository = $configRepository;goto KjbGe;SSwqF:goto vuCGV;goto K2YYP;YZOA5:$this->eccubeConfig = $eccubeConfig;goto zs8PH;ozoUu:$this->customerRepository = $customerRepository;goto AH345;OGlbu:$this->amazonApi = $this->eccubeConfig['amazon_pay']['api']['prod'];goto OxKH8;G7mOY:$this->entityManager = $entityManager;goto ozoUu;PERyI:}private function payoutSellerOrderId($orderId, $request_type = ''){goto PItQ5;PItQ5:$request_attr = $request_type === '' ? '' : strtoupper($request_type) . '_';goto ZcWu2;RJz1k:if (!($this->Config->getAmazonAccountMode() === $this->eccubeConfig['amazon_pay']['account_mode']['shared'])) {goto oMSlA;}goto By5Cq;wKgqq:$iniFile = dirname(__FILE__) . '/../amazon_pay_config.ini';goto zLfXE;TTEw2:IbGby:goto ufSq0;CBCAS:$prefix = $arrInit['prefix'];goto TTEw2;ZX8t7:$arrInit = parse_ini_file($iniFile);goto CBCAS;By5Cq:$timestamp = Carbon::now()->timestamp;goto Qdrgf;IyOyM:return $timestamp . $prefix . $request_attr . $orderId;goto RM2fR;zLfXE:if (!file_exists($iniFile)) {goto IbGby;}goto ZX8t7;ZcWu2:$prefix = '';goto wKgqq;ufSq0:$prefix = $prefix === '' ? '' : $prefix . '_';goto Y_XOS;MWI38:$timestamp = $timestamp === '' ? '' : $timestamp . '_';goto IyOyM;Y_XOS:$timestamp = '';goto RJz1k;Qdrgf:oMSlA:goto MWI38;RM2fR:}public function getAmazonProfile($access_token){goto xvU7F;qq0oh:return false;goto uNQVV;yzeJ6:if (!is_null($d)) {goto TD7or;}goto HMxab;QX7WR:logs('amazon_pay')->error('ERROR: access_token not found.');goto qq0oh;b5iBf:if ($d->email) {goto NyuiT;}goto Y2XXF;VVJ1r:Oh8yj:goto VCGHE;F2JwW:return false;goto GxJh6;OqiIV:$client = new Client($config);goto HeY3B;JDRXb:try {$response = $client->get($url);} catch (CurlException $e) {logs('amazon_pay')->info('CurlException. url=' . $url . ' error=' . $e);return false;} catch (BadResponseException $e) {logs('amazon_pay')->info('BadResponseException. url=' . $url . ' error=' . $e);return false;} catch (\Exception $e) {logs('amazon_pay')->info('Exception. url=' . $url . ' error=' . $e);return false;}goto W4EuU;HeY3B:try {$response = $client->get($url);} catch (CurlException $e) {logs('amazon_pay')->error('CurlException. url=' . $url . ' error=' . $e);return false;} catch (BadResponseException $e) {logs('amazon_pay')->error('BadResponseException. url=' . $url . ' error=' . $e);return false;} catch (\Exception $e) {logs('amazon_pay')->error('Exception. url=' . $url . ' error=' . $e);return false;}goto FkGYP;HMxab:logs('amazon_pay')->error('ERROR: not found contents. response = ' . var_export($response, true));goto uKg9K;oAJ9n:$config = ['curl' => [CURLOPT_HTTPHEADER => ['Authorization: bearer ' . $access_token], CURLOPT_RETURNTRANSFER => true]];goto OqiIV;uKg9K:return false;goto Qn7zZ;GxJh6:NyuiT:goto jph8O;EBPTp:if (!($d->aud != $this->Config->getClientId())) {goto Oh8yj;}goto SqsQ5;VCGHE:$url = $this->amazonApi['profile_api_endpoint'] . 'user/profile';goto oAJ9n;SqsQ5:logs('amazon_pay')->error('ERROR: tokeninfo response = ' . var_export($response, true));goto uGXSV;uNQVV:XR6d0:goto yFORK;jph8O:return $d;goto biCD1;qrcpT:$client = new Client($config);goto JDRXb;W4EuU:$d = json_decode($response->getBody()->getContents());goto yzeJ6;Qn7zZ:TD7or:goto EBPTp;FkGYP:$d = json_decode($response->getBody()->getContents());goto b5iBf;qCf1B:$config = ['curl' => [CURLOPT_RETURNTRANSFER => true]];goto qrcpT;xvU7F:if (!empty($access_token)) {goto XR6d0;}goto QX7WR;Y2XXF:logs('amazon_pay')->error('ERROR: profile response = ' . var_export($response, true));goto F2JwW;uGXSV:return false;goto VVJ1r;yFORK:$url = $this->amazonApi['profile_api_endpoint'] . 'auth/o2/tokeninfo?access_token=' . urlencode($access_token);goto qCf1B;biCD1:}public function getDeliveryAddress($amazonOrderReferenceId, $addressConsentToken){goto zBIHo;o1v8h:$result['Name'] = $this->sfGetXMLTagValue($arrXML, 'Name');goto O4XV3;zXPpd:$result = [];goto LsZwM;lJrf6:$result['AddressLine2'] = $this->sfGetXMLTagValue($arrXML, 'AddressLine2');goto xvKnt;T9057:return $result;goto jyyv3;Bp7VN:$result['StateOrRegion'] = $this->sfGetXMLTagValue($arrXML, 'StateOrRegion');goto o1v8h;WALRb:$result['CountryCode'] = $this->sfGetXMLTagValue($arrXML, 'CountryCode');goto Bp7VN;FaifA:$result['City'] = $this->sfGetXMLTagValue($arrXML, 'City');goto LgZqU;LgZqU:$result['Phone'] = $this->sfGetXMLTagValue($arrXML, 'Phone');goto T9057;O4XV3:$result['AddressLine1'] = $this->sfGetXMLTagValue($arrXML, 'AddressLine1');goto lJrf6;zBIHo:$parameters = ["Action" => 'GetOrderReferenceDetails', "AmazonOrderReferenceId" => $amazonOrderReferenceId, "AddressConsentToken" => $addressConsentToken];goto HgAfM;LsZwM:$result['PostalCode'] = $this->sfGetXMLTagValue($arrXML, 'PostalCode');goto WALRb;HgAfM:$arrXML = $this->req($parameters);goto zXPpd;xvKnt:$result['AddressLine3'] = $this->sfGetXMLTagValue($arrXML, 'AddressLine3');goto FaifA;jyyv3:}public function setOrderReferenceDetails($amazonOrderReferenceId, $order_id, $payment_total, $shop_name){goto H2Htb;XPNNe:$arrXML = $this->req($parameters);goto JE3A5;H2Htb:$parameters = ["Action" => 'SetOrderReferenceDetails', "AmazonOrderReferenceId" => $amazonOrderReferenceId, 'OrderReferenceAttributes.OrderTotal.Amount' => $payment_total, 'OrderReferenceAttributes.OrderTotal.CurrencyCode' => 'JPY', 'OrderReferenceAttributes.SellerOrderAttributes.SellerOrderId' => $this->payoutSellerOrderId($order_id), 'OrderReferenceAttributes.SellerOrderAttributes.StoreName' => $shop_name, 'OrderReferenceAttributes.PlatformId' => 'A1LODGGQOBGE66'];goto XPNNe;JE3A5:return $arrXML;goto Gt2cP;Gt2cP:}public function confirmOrderReference($amazonOrderReferenceId){goto Xu2oJ;zu_KA:$arrXML = $this->req($parameters);goto iQNli;iQNli:return $arrXML;goto FIFo1;Xu2oJ:$parameters = ["Action" => 'ConfirmOrderReference', "AmazonOrderReferenceId" => $amazonOrderReferenceId];goto zu_KA;FIFo1:}public function authorize($amazonOrderReferenceId, $order_id, $payment_total){goto rzxvb;uF8ZX:$arrXML = $this->req($parameters, $r);goto Kqv6U;Xsdmt:if (!($this->Config->getSale() == $this->eccubeConfig['amazon_pay']['sale']['capture'] && strpos($order_id, 'ADD') === false)) {goto OInfv;}goto yayY3;Iwlgk:return AmazonPaymentException::getErrorCode($reason_code);goto zu9mu;JUdun:logs('amazon_pay')->error('mws error: authorization failed. status = ' . $authorizationStatus . ' ' . $parameters['Action'] . ' = ' . var_export($r, true));goto BpHWR;gUH1t:roacT:goto mchS1;ULz7Z:MAtNE:goto Iyk1Y;sR5fc:Ym8bf:goto ULz7Z;CognS:logs('amazon_pay')->error('mws error: authorization failed. error = ' . var_export($r, true));goto USQeJ;zu9mu:goto vO_E3;goto YVlNa;Kqv6U:if ($arrXML !== false) {goto roacT;}goto upPoJ;LPQ8p:return 'SoftDecline';goto DKgCE;YVlNa:VtmlG:goto LPQ8p;yayY3:$parameters['CaptureNow'] = true;goto HL_P8;HL_P8:OInfv:goto L7FuM;L7FuM:$r = [];goto uF8ZX;mchS1:$authorizationStatus = $this->sfGetXMLTagValue($arrXML, 'State');goto FmYSD;BpHWR:$softDecline = $this->sfGetXMLTagValue($arrXML, 'SoftDecline');goto ddijy;ddijy:if ($softDecline == 'true') {goto VtmlG;}goto AOut0;upPoJ:$r = $this->cancelOrderReference($amazonOrderReferenceId);goto CognS;FmYSD:if (!($this->Config->getSale() != $this->eccubeConfig['amazon_pay']['sale']['capture'] && $authorizationStatus != 'Open' || $authorizationStatus == 'Declined')) {goto Ym8bf;}goto JUdun;rzxvb:$parameters = ["Action" => 'Authorize', "AmazonOrderReferenceId" => $amazonOrderReferenceId, 'AuthorizationReferenceId' => $this->payoutSellerOrderId($order_id), 'AuthorizationAmount.Amount' => $payment_total, 'AuthorizationAmount.CurrencyCode' => 'JPY', 'TransactionTimeout' => 0];goto Xsdmt;USQeJ:goto MAtNE;goto gUH1t;Iyk1Y:return $arrXML;goto FbUtT;DKgCE:vO_E3:goto sR5fc;AOut0:$reason_code = $this->sfGetXMLTagValue($arrXML, 'ReasonCode');goto Iwlgk;FbUtT:}public function capture($amazonAuthorizationId, $order_id, $captureAmount){goto hPfdi;brjYa:$r = [];goto Mzg6q;sbk3y:return $r;goto H1X4a;Yipvc:return $arrXML;goto G54vI;hPfdi:$parameters = ['Action' => 'Capture', 'AmazonAuthorizationId' => $amazonAuthorizationId, 'CaptureReferenceId' => $this->payoutSellerOrderId($order_id, 'capture'), 'CaptureAmount.Amount' => $captureAmount, 'CaptureAmount.CurrencyCode' => 'JPY'];goto brjYa;RQyp6:if (!($arrXML === false)) {goto GgM4A;}goto sbk3y;H1X4a:GgM4A:goto Yipvc;Mzg6q:$arrXML = $this->req($parameters, $r);goto RQyp6;G54vI:}public function cancelOrderReference($amazonOrderReferenceId){goto luMf6;z5293:return $r;goto A740b;Calyv:$arrXML = $this->req($parameters, $r);goto FafRX;A740b:XQe3F:goto EFSZG;EFSZG:return $arrXML;goto wzD3H;qHlZJ:$r = [];goto Calyv;luMf6:$parameters = ['Action' => 'CancelOrderReference', 'AmazonOrderReferenceId' => $amazonOrderReferenceId];goto qHlZJ;FafRX:if (!($arrXML === false)) {goto XQe3F;}goto z5293;wzD3H:}public function refund($amazonCaptureId, $order_id, $refundAmount){goto DmP73;oJbw6:return $arrXML;goto OTFm9;hHVR3:return $r;goto rz_nm;rz_nm:q21iQ:goto oJbw6;DmP73:$parameters = ['Action' => 'Refund', 'AmazonCaptureId' => $amazonCaptureId, 'RefundReferenceId' => $this->payoutSellerOrderId($order_id), 'RefundAmount.Amount' => $refundAmount, 'RefundAmount.CurrencyCode' => 'JPY'];goto oIhIZ;oIhIZ:$r = [];goto VtmLe;nWODh:if (!($arrXML === false)) {goto q21iQ;}goto hHVR3;VtmLe:$arrXML = $this->req($parameters, $r);goto nWODh;OTFm9:}private function req($parameters, &$r = array(), $count = 1){goto Jm3PH;SHvms:goto b4Y8a;goto e8iVS;PNswt:$err = xml_parse_into_struct($parser, $r, $arrXML, $idx);goto ZMqaK;kA7QH:try {$response = $client->post($url, ['form_params' => $parameters]);} catch (CurlException $e) {logs('amazon_pay')->info('CurlException. url=' . $url . ' error=' . $e);return false;} catch (BadResponseException $e) {logs('amazon_pay')->info('BadResponseException. url=' . $url . ' error=' . $e);return false;} catch (\Exception $e) {logs('amazon_pay')->info('Exception. url=' . $url . ' error=' . $e);return false;}goto FHaAs;Tu9_v:logs('amazon_pay')->error('aws request throttled error. action:' . $parameters['Action'] . ' err_count:' . $count);goto hbjk2;ubnje:Y31U1:goto eBOvV;PzFKY:return $arrXML;goto cUmuM;HcBvn:goto KaWid;goto AeIGZ;eBOvV:$parser = xml_parser_create();goto Mcg7y;AeIGZ:GWdgP:goto md5hx;nxUFF:return $this->amazonApiConfig['payment_method_not_allowd'];goto YITpE;HkafD:if (strpos($r, 'RequestThrottled') !== false) {goto tOx55;}goto qekwB;qekwB:if (strpos($r, 'PaymentMethodNotAllowed') !== false) {goto wrrGT;}goto IcuNd;YITpE:iAgvy:goto SHvms;FLY9d:$url = $this->amazonApi['mws_endpoint'];goto hhXrg;Bta0W:logs('amazon_pay')->error('mws error: unexpected response. ' . $parameters['Action'] . ' = ' . var_export($r, true));goto qR05I;UrXzC:GAh1i:goto FLY9d;EXr5C:if (!($response->getStatusCode() != 200)) {goto Y31U1;}goto tA5UR;Fubk1:wrrGT:goto nxUFF;tA5UR:logs('amazon_pay')->error('mws error: http_code = ' . $response->getStatusCode() . ' ' . $parameters['Action'] . ' = ' . var_export($r, true));goto HkafD;md5hx:return false;goto xrD5f;G8dze:b4Y8a:goto ubnje;qR05I:return false;goto fPi3U;e8iVS:tOx55:goto Tu9_v;FHaAs:$r = $response->getBody()->getContents();goto EXr5C;Jm3PH:if (!($count == 1)) {goto GAh1i;}goto GwnWL;IcuNd:return false;goto t4T3M;xrD5f:KaWid:goto G8dze;ZMqaK:xml_parser_free($parser);goto OR8_H;tMecD:$client = new Client($config);goto kA7QH;Mcg7y:xml_parser_set_option($parser, XML_OPTION_TARGET_ENCODING, "UTF-8");goto QyXKQ;QyXKQ:xml_parser_set_option($parser, XML_OPTION_SKIP_WHITE, true);goto PNswt;RaWW5:self::req($parameters, $r, $count + 1);goto HcBvn;hhXrg:$config = ['curl' => [CURLOPT_RETURNTRANSFER => true, CURLOPT_HTTPHEADER => ['Content-Type: application/x-www-form-urlencoded; charset=utf-8']]];goto tMecD;hbjk2:if ($this->amazonApiConfig['thlottle_err_limit'] <= $count) {goto GWdgP;}goto RUnhl;GwnWL:$parameters = $this->_addRequiredParameters($parameters);goto UrXzC;fPi3U:Wm4Wy:goto PzFKY;OR8_H:if (!$this->sfExistsXMLTag($arrXML, "Action")) {goto Wm4Wy;}goto Bta0W;t4T3M:goto iAgvy;goto Fubk1;RUnhl:sleep($this->amazonApiConfig['thlottle_sleep']);goto RaWW5;cUmuM:}private function _addRequiredParameters(array $parameters){goto Cq9JU;Cq9JU:$parameters['AWSAccessKeyId'] = $this->Config->getMwsAccessKeyId();goto TkKTI;uoQlt:$parameters['SellerId'] = $this->Config->getSellerId();goto xLQTP;VgTWX:$parameters['Signature'] = $this->_signParameters($parameters, $this->Config->getMwsSecretAccessKey());goto AUblb;AUblb:if (!($this->amazonApi['mws_auth_token'] != '')) {goto pFvFX;}goto i_8F2;i_8F2:$parameters['MWSAuthToken'] = $this->amazonApi['mws_auth_token'];goto uOb4b;oMrGR:$parameters['SignatureMethod'] = "HmacSHA256";goto VgTWX;TkKTI:$parameters['Timestamp'] = $this->_getFormattedTimestamp();goto QHMt1;QHMt1:$parameters['Version'] = $this->amazonApi['service_version'];goto uoQlt;xLQTP:$parameters['SignatureVersion'] = 2;goto oMrGR;BT63G:return $parameters;goto pyudV;uOb4b:pFvFX:goto BT63G;pyudV:}private function _getFormattedTimestamp(){return gmdate("Y-m-d\\TH:i:s.\\0\\0\\0\\Z", time());}private function _signParameters(array $parameters, $key){$stringToSign = $this->_calculateStringToSignV2($parameters);return $this->_sign($stringToSign, $key);}private function _calculateStringToSignV2(array $parameters){goto eAF9Y;Oni4A:$data .= $endpoint['host'];goto RcpHD;fVkjx:$uri = "/";goto Y0Q1o;q4v7V:$endpoint = parse_url($this->amazonApi['mws_endpoint']);goto Oni4A;IPQPc:if (isset($uri)) {goto aUaI9;}goto fVkjx;Y0Q1o:aUaI9:goto LUDmo;eAF9Y:$data = 'POST';goto yMI03;LN77S:$uri = array_key_exists('path', $endpoint) ? $endpoint['path'] : null;goto IPQPc;yMI03:$data .= "\n";goto q4v7V;pbquc:$data .= $this->_getParametersAsString($parameters);goto JWWRk;Hyvky:uksort($parameters, 'strcmp');goto pbquc;TLk7E:$data .= $uriencoded;goto ocUEx;RcpHD:$data .= "\n";goto LN77S;LUDmo:$uriencoded = implode("/", array_map([$this, "_urlencode"], explode("/", $uri)));goto TLk7E;ocUEx:$data .= "\n";goto Hyvky;JWWRk:return $data;goto kZvZD;kZvZD:}private function _urlencode($value){return str_replace('%7E', '~', rawurlencode($value));}private function _getParametersAsString(array $parameters){goto nYTUo;nYTUo:$queryParameters = [];goto BqzSR;C13ol:HbAoi:goto bgM8B;bgM8B:return implode('&', $queryParameters);goto zp0Jp;BqzSR:foreach ($parameters as $key => $value) {$queryParameters[] = $key . '=' . $this->_urlencode($value);TWATX:}goto C13ol;zp0Jp:}private function _sign($data, $key){$hash = 'sha256';return base64_encode(hash_hmac($hash, $data, $key, true));}public function sfGetXMLTagValue($arrVal, $tag){goto H7gAd;VUQVI:foreach ($arrVal as $array) {goto uR3Pd;sAZcA:return $array['value'];goto u3HgI;M5tHU:jPC0h:goto xpkz3;u3HgI:WM1wR:goto M5tHU;uR3Pd:if (!($tag == $array['tag'])) {goto WM1wR;}goto sAZcA;xpkz3:}goto GmANh;H7gAd:$tag = strtoupper($tag);goto VUQVI;GmANh:w1cqH:goto cCncN;cCncN:return false;goto Yn1ul;Yn1ul:}private function sfExistsXMLTag($arrVal, $tag){goto H2bUc;H8yAa:return false;goto WAl8q;H2bUc:$tag = strtoupper($tag);goto bEfzW;bFegZ:WgMdR:goto H8yAa;bEfzW:foreach ($arrVal as $array) {goto bWvoH;bWvoH:if (!($tag == $array['tag'])) {goto nFjfz;}goto VtNss;lG6TQ:obWNF:goto bTHaL;VtNss:return NRFfQ;goto MER3q;MER3q:nFjfz:goto lG6TQ;bTHaL:}goto bFegZ;WAl8q:}public function lwaForMypageChange(Request $request, $profile, $Customer){goto Z0DGy;I9yom:if (!$profile->user_id) {goto COFBk;}goto obo0_;emZ3A:return $route;goto xvHkF;Zd67S:logs('amazon_pay')->info('Success: Succeed to set amazon_user_id customer_id = ' . $Customer->getId());goto it10u;KZnOM:$arrRoute['route'] = 'mypage_change';goto CpH3n;obo0_:$Customer->setAmazonUserId($profile->user_id);goto Zd67S;CpH3n:return $arrRoute;goto sN6l9;xvHkF:PThnE:goto I9yom;sQncI:COFBk:goto KZnOM;Z0DGy:$arrRoute = ['route' => '', 'param' => []];goto n5lwI;xjkeY:$route = $this->lwaForMypageLogin($request, $profile);goto emZ3A;n5lwI:if ($Customer instanceof \Eccube\Entity\Customer) {goto PThnE;}goto xjkeY;it10u:$this->entityManager->flush();goto sQncI;sN6l9:}public function lwaForMypageLogin(Request $request, $profile){goto B1Z8S;Dj_mB:$request->getSession()->migrate(true);goto SWaWG;Y6td9:FjZGy:goto Kkzfa;SWaWG:$this->cartService->mergeFromPersistedCart();goto D1gde;nIv5d:$arrRoute['param'] = ['err_amazon_login' => true];goto oTniJ;bNuQ8:if (!(empty($Customers) || !$Customers[0] instanceof \Eccube\Entity\Customer)) {goto RFQnT;}goto l_qj2;fxt7r:$Customer = $Customers[0];goto HDPAX;Z8Oq1:$this->tokenStorage->setToken($token);goto Dj_mB;B1Z8S:$arrRoute = ['route' => '', 'param' => []];goto eNxnU;HDPAX:$token = new UsernamePasswordToken($Customer, null, 'customer', ['ROLE_USER']);goto Z8Oq1;Kkzfa:$this->cartService->save();goto f3CIe;eNxnU:$Customers = $this->customerRepository->getNonWithdrawingCustomers(['amazon_user_id' => $profile->user_id]);goto bNuQ8;roJWS:return $arrRoute;goto Rp0sr;f3CIe:$arrRoute['route'] = 'homepage';goto xmTpL;xmTpL:return $arrRoute;goto b7DwP;l_qj2:$arrRoute['route'] = 'mypage_login';goto nIv5d;D1gde:foreach ($this->cartService->getCarts() as $Cart) {$this->purchaseFlow->validate($Cart, new PurchaseContext($Cart, $Customer[0]));MbxsT:}goto Y6td9;Rp0sr:RFQnT:goto fxt7r;oTniJ:logs('amazon_pay')->info('Error: Cannot find customer corresponded with amazon_user_id');goto roJWS;b7DwP:}}