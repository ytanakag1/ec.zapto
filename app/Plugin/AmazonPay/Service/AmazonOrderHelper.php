<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.3   |
    |              on 2020-11-16 14:57:02              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
namespace Plugin\AmazonPay\Service;use Doctrine\ORM\EntityManagerInterface;use Plugin\AmazonPay\Entity\Master\AmazonStatus;use Plugin\AmazonPay\Entity\AmazonTrading;use Plugin\AmazonPay\Exception\AmazonException;use Plugin\AmazonPay\Exception\AmazonPaymentException;use Plugin\AmazonPay\Exception\AmazonSystemException;use Plugin\AmazonPay\Repository\Master\AmazonStatusRepository;use Plugin\AmazonPay\Repository\ConfigRepository;use Plugin\AmazonPay\Service\Method\AmazonPay;use Plugin\AmazonPay\Service\AmazonRequestService;use Eccube\Common\EccubeConfig;use Eccube\Entity\Customer;use Eccube\Entity\Order;use Eccube\Entity\Shipping;use Eccube\Entity\Master\CustomerStatus;use Eccube\Entity\Master\OrderStatus;use Eccube\Repository\CustomerRepository;use Eccube\Repository\BaseInfoRepository;use Eccube\Repository\PaymentRepository;use Eccube\Repository\PluginRepository;use Eccube\Repository\Master\CustomerStatusRepository;use Eccube\Repository\Master\OrderStatusRepository;use Eccube\Repository\Master\PrefRepository;use Symfony\Component\HttpFoundation\Session\SessionInterface;use Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorageInterface;use Symfony\Component\Security\Core\Authentication\Token\UsernamePasswordToken;use Symfony\Component\Security\Core\Encoder\EncoderFactoryInterface;use Eccube\Service\PurchaseFlow\PurchaseContext;use Eccube\Service\PurchaseFlow\Processor\StockReduceProcessor;use Eccube\Service\PurchaseFlow\Processor\PointProcessor;class AmazonOrderHelper{private $sessionAmazonProfileKey = 'amazon_pay.profile';private $amazonSettings;private $pointProcessor;private $stockReduceProcessor;public function __construct(CustomerRepository $customerRepository, BaseInfoRepository $baseInfoRepository, PaymentRepository $paymentRepository, PluginRepository $pluginRepository, CustomerStatusRepository $customerStatusRepository, OrderStatusRepository $orderStatusRepository, EntityManagerInterface $entityManager, EccubeConfig $eccubeConfig, PrefRepository $prefRepository, SessionInterface $session, EncoderFactoryInterface $encoderFactory, TokenStorageInterface $tokenStorage, AmazonStatusRepository $amazonStatusRepository, ConfigRepository $configRepository, AmazonRequestService $amazonRequestService, StockReduceProcessor $stockReduceProcessor, PointProcessor $pointProcessor){goto jaaFB;zhx_a:$this->pointProcessor = $pointProcessor;goto aooqY;zM4q1:$this->tokenStorage = $tokenStorage;goto tOgD3;wkp2h:$this->stockReduceProcessor = $stockReduceProcessor;goto zhx_a;jaaFB:$this->customerRepository = $customerRepository;goto T9PKa;Z7yno:$this->entityManager = $entityManager;goto pbpZi;NquW0:$this->orderStatusRepository = $orderStatusRepository;goto Z7yno;IYrvy:$this->paymentRepository = $paymentRepository;goto Cr6iD;Cr6iD:$this->pluginRepository = $pluginRepository;goto udd4F;tOgD3:$this->amazonStatusRepository = $amazonStatusRepository;goto TJJHL;wjrMl:$this->amazonRequestService = $amazonRequestService;goto TZo5T;TJJHL:$this->configRepository = $configRepository;goto wjrMl;YmXl8:$this->session = $session;goto kzYMf;T9PKa:$this->BaseInfo = $baseInfoRepository->get();goto IYrvy;OfuTE:$this->prefRepository = $prefRepository;goto YmXl8;udd4F:$this->customerStatusRepository = $customerStatusRepository;goto NquW0;kzYMf:$this->encoderFactory = $encoderFactory;goto zM4q1;TZo5T:$this->Config = $this->configRepository->get();goto wkp2h;pbpZi:$this->eccubeConfig = $eccubeConfig;goto OfuTE;aooqY:}public function getOrderer(){goto jHv5j;Kpf1Y:$Customer->setKana01('　');goto qgKH8;PhmMA:$Customer->setName02('　');goto Kpf1Y;eqZ6U:$profile = unserialize($this->session->get($this->sessionAmazonProfileKey));goto NS2_f;yMadF:$Pref = $this->prefRepository->find(13);goto K8tTq;NS2_f:$Customer->setEmail($profile->email);goto tjDBS;K8tTq:$Customer->setPref($Pref);goto eqZ6U;jHv5j:$Customer = new Customer();goto ODfV7;qgKH8:$Customer->setKana02('　');goto yMadF;ODfV7:$Customer->setName01('　');goto PhmMA;tjDBS:return $Customer;goto iH23m;iH23m:}public function initializeAmazonOrder($Order, $Customer){goto vQpXF;kPhq7:$Order->setPayment($Payment);goto MGy6P;cVr_T:return $Order;goto qdJBC;vQpXF:$Payment = $this->paymentRepository->findOneBy(['method_class' => AmazonPay::class]);goto kPhq7;MGy6P:$Order->setEmail($Customer->getEmail());goto pH3oO;pH3oO:$this->entityManager->persist($Order);goto cVr_T;qdJBC:}public function convertAddress(Order $Order, Shipping $Shipping, $arrAmznAddr){goto B_Lg3;JC8Jy:$addr01 = $arrAmznAddr['City'] . $AddressLine1Front;goto Yo3ok;zrBrQ:$Pref = $this->prefRepository->find(13);goto u2lcE;zYK0f:preg_match('/(\\d{3})(\\d{4})/', $arrAmznAddr['PostalCode'], $arrPostalCode);goto yUynA;B_e8a:rUlqJ:goto Cz_Wo;YxVyK:vGG_l:goto sCgeF;j8wWJ:$Shipping->setAddr01($addr01)->setAddr02($addr02);goto DH6mF;Mo_F6:$addr01 = $arrAmznAddr['City'] . $convertAmznAddr1;goto AvteR;h2UwC:$Pref = $this->prefRepository->findOneBy(['name' => $arrAmznAddr['StateOrRegion']]);goto u_NKm;NrWyo:if (!empty($arrFixKana)) {goto iTqDQ;}goto d5N97;ThMd3:$PostalCodeCount = preg_replace('/(-|−)/', '', $arrAmznAddr['PostalCode']);goto KCIZQ;OVyHP:goto N8RDZ;goto u1UHs;yUynA:unset($arrPostalCode[0]);goto RVRUe;RGPf5:tKQPt:goto h2UwC;zo3L8:kFA9a:goto Jtb7G;tWPON:$AddressLine1End = mb_substr($convertAmznAddr1, $offset);goto JC8Jy;KCIZQ:if (!(mb_strlen($PostalCodeCount) >= 9)) {goto GrtA1;}goto rG2V7;CBx7k:switch ($arrAmznAddr['StateOrRegion']) {case "東京":$arrAmznAddr['StateOrRegion'] = "東京都";goto rUlqJ;case "大阪":$arrAmznAddr['StateOrRegion'] = "大阪府";goto rUlqJ;case "京都":$arrAmznAddr['StateOrRegion'] = "京都府";goto rUlqJ;case "東京都":goto rUlqJ;case "大阪府":goto rUlqJ;case "京都府":goto rUlqJ;case "北海道":goto rUlqJ;default:goto SJ4Os;SJ4Os:if (preg_match('/県$/u', $arrAmznAddr['StateOrRegion'])) {goto EwFFb;}goto EACbo;EACbo:$arrAmznAddr['StateOrRegion'] .= '県';goto U9iJD;U9iJD:EwFFb:goto LKSId;LKSId:}goto zXZp5;Hc2z7:YLb4C:goto a3ltn;AvteR:$addr02 = $convertAmznAddr2;goto GEzpX;Cz_Wo:$convertAmznAddr1 = mb_convert_kana($arrAmznAddr['AddressLine1'], 'n', 'utf-8');goto bFiAW;ZHNgk:x4yAf:goto UHwZ2;u2lcE:$Shipping->setPref($Pref);goto rkDLG;zXZp5:GHM3t:goto B_e8a;DuQnZ:iTqDQ:goto My1ut;rkDLG:$addr01 = $arrAmznAddr['StateOrRegion'] . $addr01;goto OVyHP;Yo3ok:$addr02 = $AddressLine1End . $convertAmznAddr2;goto zo3L8;rG2V7:$arrAmznAddr = array('PostalCode' => ' ', 'CountryCode' => '', 'StateOrRegion' => '', 'Name' => '', 'AddressLine1' => '', 'AddressLine2' => '', 'AddressLine3' => '', 'City' => '', 'Phone' => '');goto gQeev;v31Un:if (preg_match("/[0-9]/", $convertAmznAddr1, $matches, PREG_OFFSET_CAPTURE)) {goto vGG_l;}goto Mo_F6;hTT6Q:bbKsc:goto ThMd3;u_NKm:if (!empty($Pref)) {goto rQMqB;}goto xnmHS;uy5tf:$Shipping->setPref($Pref);goto cg31i;UHwZ2:gc765:goto CBx7k;DH6mF:$Shipping->setPhoneNumber(preg_replace('/(-|−)/', '', $arrAmznAddr['Phone']));goto f3IU0;ta3kk:if (!($this->Config->getOrderCorrect() == $this->eccubeConfig['amazon_pay']['toggle']['on'])) {goto gc765;}goto b3rEX;GEzpX:goto kFA9a;goto YxVyK;b3rEX:$arrFixKana = $this->reviseKana($Shipping->getName01(), $Shipping->getName02(), $Order->getEmail());goto NrWyo;bFiAW:$convertAmznAddr2 = mb_convert_kana($arrAmznAddr['AddressLine2'], 'n', 'utf-8');goto v31Un;My1ut:$Shipping->setKana01($arrFixKana['kana01'])->setKana02($arrFixKana['kana02']);goto ZHNgk;B_Lg3:if (strpos($arrAmznAddr['PostalCode'], '-') !== false) {goto YLb4C;}goto zYK0f;u1UHs:rQMqB:goto uy5tf;Jtb7G:if (!($arrAmznAddr['AddressLine3'] != '')) {goto tKQPt;}goto e1onS;d5N97:$Shipping->setKana01('　')->setKana02('　');goto E3lgE;qKSuO:goto bbKsc;goto Hc2z7;bNx4S:$Shipping->setPostalCode(preg_replace('/(-|−)/', '', $arrAmznAddr['PostalCode']));goto YC2HI;sCgeF:$offset = strlen(substr($convertAmznAddr1, 0, $matches[0][1]));goto UwIgR;gQeev:GrtA1:goto bNx4S;WP3gi:$Shipping->setName01($arrName['name01'])->setName02($arrName['name02']);goto ta3kk;YC2HI:$arrName = $this->divideName($arrAmznAddr['Name']);goto WP3gi;E3lgE:goto x4yAf;goto DuQnZ;xnmHS:logs('amazon_pay')->info('*** 都道府県マッチングエラー *** addr = ' . var_export($arrAmznAddr, true));goto zrBrQ;UwIgR:$AddressLine1Front = mb_substr($convertAmznAddr1, 0, $offset);goto tWPON;cg31i:N8RDZ:goto j8wWJ;a3ltn:$arrPostalCode = explode('-', $arrAmznAddr['PostalCode']);goto hTT6Q;e1onS:$addr02 .= " " . $arrAmznAddr['AddressLine3'];goto RGPf5;RVRUe:$arrPostalCode = array_values($arrPostalCode);goto qKSuO;f3IU0:}public function divideName($name){goto piISz;Dhcp_:z_A0s:goto EMGzZ;rBylh:if (count($arrName) == 2) {goto z_A0s;}goto szUGk;NkKq_:logs('amazon_pay')->info('*** 名前補正 ***');goto OjEIk;jEYdr:$arrResult['name01'] = $name;goto pXXw2;EMGzZ:$arrResult['name01'] = $arrName[0];goto n4Rkp;CFGY5:$arrResult = $arrFixName;goto NkKq_;nuvZE:if (!empty($arrFixName)) {goto a3tKV;}goto jEYdr;Bex0u:$arrName = preg_split('/[ 　]+/u', $name);goto rBylh;pXXw2:$arrResult['name02'] = '　';goto czHpp;OjEIk:KEcrE:goto CqNzu;Acpjm:$arrFixName = $this->reviseName($name);goto LLRUu;czHpp:goto KEcrE;goto etwjM;LLRUu:Ib5Mn:goto nuvZE;ztQgt:return $arrResult;goto P_F8z;UmM3u:gxhlI:goto ztQgt;szUGk:if (!($this->Config->getOrderCorrect() == $this->eccubeConfig['amazon_pay']['toggle']['on'])) {goto Ib5Mn;}goto Acpjm;piISz:$arrResult = [];goto Bex0u;etwjM:a3tKV:goto CFGY5;n4Rkp:$arrResult['name02'] = $arrName[1];goto UmM3u;CqNzu:goto gxhlI;goto Dhcp_;P_F8z:}private function searchObject($search, $target, $objectName){goto z9T0W;vhgTE:$qb->select('o')->from('\\Eccube\\Entity' . "\\{$objectName}", 'o');goto Mheh2;fF5QD:zv6Ws:goto H7K7V;H7K7V:return $qb->getQuery()->getResult();goto iCLKD;K78_f:$qb->andWhere('CONCAT(o.name01, o.name02) = :name')->setParameter('name', $search)->andWhere("TRIM(o.name02) <> ''");goto fF5QD;z9T0W:$qb = $this->entityManager->createQueryBuilder();goto vhgTE;Mheh2:if (!($target == 'name')) {goto zv6Ws;}goto K78_f;iCLKD:}private function searchObjectByNameAndEmail($name01, $name02, $email, $target, $objectName){goto keX9_;keX9_:$qb = $this->entityManager->createQueryBuilder();goto RPhqB;GFnZV:if ($objectName == 'Customer') {goto R8LjC;}goto Si2On;A2e3Y:if ($objectName == 'Order') {goto Y706b;}goto iw6kG;rQHk4:R8LjC:goto tVbX9;RPhqB:if (!($target == 'kana')) {goto B4S72;}goto A2e3Y;Si2On:goto wZO8z;goto fVl3y;wZyfV:goto wZO8z;goto rQHk4;p4wLS:$qb->select('o')->from(Order::class, 'o')->andWhere('o.name01 = :name01')->setParameter('name01', $name01)->andWhere('o.name02 = :name02')->setParameter('name02', $name02)->andWhere('o.email = :email')->setParameter('email', $email)->andWhere("o.kana01 <> ''")->andWhere("o.kana02 <> ''")->andWhere("o.OrderStatus <> :status_pending")->setParameter('status_pending', OrderStatus::PENDING)->andWhere("o.OrderStatus <> :status_processing")->setParameter('status_processing', OrderStatus::PROCESSING)->andWhere("o.AmazonStatus IS NOT NULL")->orderBy('o.update_date', 'DESC');goto sPlDa;tVbX9:$qb->select('c')->from(Customer::class, 'c')->andWhere('c.name01 = :name01')->setParameter('name01', $name01)->andWhere('c.name02 = :name02')->setParameter('name02', $name02)->andWhere('c.email = :email')->setParameter('email', $email)->andWhere("c.kana01 <> ''")->andWhere("c.kana02 <> ''")->andWhere("c.amazon_user_id <> ''")->orderBy('c.update_date', 'DESC');goto uI7qm;iw6kG:if ($objectName == 'Shipping') {goto CvMBc;}goto GFnZV;pfnWE:B4S72:goto Aktzt;fVl3y:Y706b:goto p4wLS;tILBM:$qb->select('s')->from(Shipping::class, 's')->leftJoin('s.Order', 'o')->andWhere('s.name01 = :name01')->setParameter('name01', $name01)->andWhere('s.name02 = :name02')->setParameter('name02', $name02)->andWhere('o.email = :email')->setParameter('email', $email)->andWhere("s.kana01 <> ''")->andWhere("s.kana02 <> ''")->andWhere("o.OrderStatus <> :status_pending")->setParameter('status_pending', OrderStatus::PENDING)->andWhere("o.OrderStatus <> :status_processing")->setParameter('status_processing', OrderStatus::PROCESSING)->andWhere("o.AmazonStatus IS NOT NULL")->orderBy('o.update_date', 'DESC');goto wZyfV;Aktzt:return $qb->getQuery()->getResult();goto fOplc;uI7qm:wZO8z:goto pfnWE;sPlDa:goto wZO8z;goto WoZCY;WoZCY:CvMBc:goto tILBM;fOplc:}public function reviseName($name){goto MGj72;vwcF2:$Objects = $this->searchObject($name, 'name', 'Order');goto tsmIl;vJI4R:$Objects = $this->searchObject($name, 'name', 'Customer');goto BKGxG;j2FD3:if (empty($Objects)) {goto hd1_W;}goto Olng1;v2AkJ:$arrFixName['name02'] = $Objects[0]->getName02();goto HPy6b;MGj72:$arrFixName = [];goto vwcF2;Olng1:$arrFixName['name01'] = $Objects[0]->getName01();goto v2AkJ;h6L7O:$Objects = $this->searchObject($name, 'name', 'Shipping');goto bP6u8;tsmIl:if (!empty($Objects)) {goto frxuS;}goto h6L7O;LBBjE:frxuS:goto j2FD3;HPy6b:hd1_W:goto Bv0h8;BKGxG:R5FbE:goto LBBjE;bP6u8:if (!empty($Objects)) {goto R5FbE;}goto vJI4R;Bv0h8:return $arrFixName;goto oxW2k;oxW2k:}public function reviseKana($name01, $name02, $email){goto TloIV;rOBEX:$arrFixKana['kana01'] = $Objects[0]->getKana01();goto wIlY8;ag3Ms:$Objects = $this->searchObjectByNameAndEmail($name01, $name02, $email, 'kana', 'Shipping');goto tlztK;ymaYz:return $arrFixKana;goto RbUrP;wIlY8:$arrFixKana['kana02'] = $Objects[0]->getKana02();goto CWdHD;N2zD_:$Objects = $this->searchObjectByNameAndEmail($name01, $name02, $email, 'kana', 'Order');goto qW6Um;tlztK:if (!empty($Objects)) {goto jp2P4;}goto M9XeC;mqnUG:if (empty($Objects)) {goto EEpVr;}goto rOBEX;FGCFP:jp2P4:goto IUkEg;M9XeC:$Objects = $this->searchObjectByNameAndEmail($name01, $name02, $email, 'kana', 'Customer');goto FGCFP;qW6Um:if (!empty($Objects)) {goto Mwsol;}goto ag3Ms;TloIV:$arrFixKana = [];goto N2zD_;IUkEg:Mwsol:goto mqnUG;CWdHD:EEpVr:goto ymaYz;RbUrP:}public function copyToOrderFromShipping(Order $Order, Shipping $Shipping){$Order->setName01($Shipping->getName01())->setName02($Shipping->getName02())->setKana01($Shipping->getKana01())->setKana02($Shipping->getKana02())->setPhoneNumber($Shipping->getPhoneNumber())->setPostalCode($Shipping->getPostalCode())->setPref($Shipping->getPref())->setAddr01($Shipping->getAddr01())->setAddr02($Shipping->getAddr02());}public function copyToOrderFromCustomer(Order $Order, Customer $Customer){goto WGg8R;R_elW:$Order->setName01($Customer->getName01())->setName02($Customer->getName02())->setKana01($Customer->getKana01())->setKana02($Customer->getKana02())->setCompanyName($Customer->getCompanyName())->setEmail($Customer->getEmail())->setPhoneNumber($Customer->getPhoneNumber())->setPostalCode($Customer->getPostalCode())->setPref($Customer->getPref())->setAddr01($Customer->getAddr01())->setAddr02($Customer->getAddr02())->setSex($Customer->getSex())->setBirth($Customer->getBirth())->setJob($Customer->getJob());goto b4lFd;VD61S:m5Ive:goto xADlA;xADlA:if (!$Customer->getId()) {goto Jul53;}goto EzZn_;v0xll:Jul53:goto R_elW;NSZZO:return;goto VD61S;WGg8R:if (!empty($Customer)) {goto m5Ive;}goto NSZZO;EzZn_:$Order->setCustomer($Customer);goto v0xll;b4lFd:}public function requestOrderToAmazon(Order $Order, $amazonOrderReferenceId){goto k8K4S;k8K4S:if (!($Order->getPaymentTotal() == 0)) {goto KknZ8;}goto Zaiob;FqkeX:logs('amazon_pay')->info('SetOrderReferenceDetails amazonOrderReferenceId = ' . $amazonOrderReferenceId);goto d61lM;LKGpK:if (!($r === false)) {goto qY2ry;}goto FqkeX;Zaiob:throw AmazonPaymentException::create(AmazonPaymentException::ZERO_PAYMENT);goto UpDCC;d61lM:throw new AmazonException();goto xnoTV;xnoTV:qY2ry:goto J5jHi;A26j8:$r = $this->amazonRequestService->setOrderReferenceDetails($amazonOrderReferenceId, $Order->getId(), $Order->getPaymentTotal(), $this->BaseInfo->getShopName());goto LKGpK;J5jHi:$r = $this->confirmAmazonOrder($Order, $amazonOrderReferenceId);goto pwh5X;pwh5X:$amazonTradingId = $this->amazonRequestService->sfGetXMLTagValue($r, 'AMAZONAUTHORIZATIONID');goto tLDHh;tLDHh:return $amazonTradingId;goto XwrJP;UpDCC:KknZ8:goto A26j8;XwrJP:}private function confirmAmazonOrder(Order $Order, $amazonOrderReferenceId, $count = 1){goto gbi0K;gEh2k:if (!($r == $this->eccubeConfig['amazon_pay']['api']['error']['invalid_payment_method'] || $r == $this->eccubeConfig['amazon_pay']['api']['error']['amazon_rejected'] || $r == $this->eccubeConfig['amazon_pay']['api']['error']['transaction_timeout'] || $r === false)) {goto JyNzQ;}goto wdgeS;JWXSS:if ($r === 'SoftDecline') {goto vr534;}goto gEh2k;EtnYr:if ($this->{$this}->eccubeConfig['amazon_pay']['api']['config']['authorize_limit'] <= $count) {goto s5zc5;}goto jFLZL;tkzx5:goto MIblH;goto t2Mxg;X_Q1_:logs('amazon_pay')->info('AmazonError: ConfirmOrderReference amazonOrderReferenceId = ' . $amazonOrderReferenceId);goto ilkkR;VHDW3:GTP7f:goto CfASF;jOpTG:logs('amazon_pay')->info('Number of times Authorize retry excess.');goto xC_Mx;O5F9p:throw new AmazonPaymentException();goto OjUWB;gbi0K:$r = $this->amazonRequestService->confirmOrderReference($amazonOrderReferenceId);goto Fu41_;t2Mxg:DTtoe:goto mwsr0;cEzRp:s5zc5:goto jOpTG;CfASF:$r = $this->amazonRequestService->authorize($amazonOrderReferenceId, $order_id, $Order->getPaymentTotal());goto JWXSS;Pqb2F:$r = self::confirmAmazonOrder($Order, $amazonOrderReferenceId, $count + 1);goto eyXCI;wdgeS:logs('amazon_pay')->info('Authorize amazonOrderReferenceId = ' . $amazonOrderReferenceId);goto ZAASB;ilkkR:throw new AmazonException();goto rQwh5;DJQ4S:FZ2DX:goto MrxD_;Fu41_:if ($r == $this->eccubeConfig['amazon_pay']['api']['error']['payment_method_not_allowed']) {goto FZ2DX;}goto JuOwt;xC_Mx:logs('amazon_pay')->info('Authorize amazonOrderReferenceId = ' . $amazonOrderReferenceId);goto Jt6Zl;NZE0D:if ($r == $this->eccubeConfig['amazon_pay']['api']['error']['transaction_timeout']) {goto nH9kF;}goto jFzM4;jFzM4:throw new AmazonException();goto ji1kg;ji1kg:goto k0Wwu;goto QoSl7;eyXCI:goto kGv54;goto cEzRp;jFLZL:logs('amazon_pay')->info('Authorize retry. count = ' . $count);goto Pqb2F;PLT2p:throw new AmazonSystemException();goto aNAN5;OjUWB:Tad5y:goto mp7Uy;FHowK:if ($r == $this->eccubeConfig['amazon_pay']['api']['error']['amazon_rejected']) {goto DTtoe;}goto NZE0D;MrxD_:logs('amazon_pay')->info('PaymentMethodNotAllowed: ConfirmOrderReference amazonOrderReferenceId = ' . $amazonOrderReferenceId);goto O5F9p;ocKmh:xPZ07:goto ofplA;ofplA:JyNzQ:goto HK257;JuOwt:if (!($r === false)) {goto KlNP1;}goto X_Q1_;QoSl7:nH9kF:goto PLT2p;lwQti:MIblH:goto Ikbpy;ZVp7Z:if (!(1 < $count)) {goto GTP7f;}goto v9tUW;a3vAJ:kGv54:goto zzUi9;Jt6Zl:throw new AmazonException();goto a3vAJ;HK257:goto CF3f8;goto nn9kT;mp7Uy:$order_id = $Order->getId();goto ZVp7Z;aNAN5:k0Wwu:goto tkzx5;zzUi9:CF3f8:goto VMvjK;MoeRH:rwje2:goto qq_lo;mwsr0:throw AmazonPaymentException::create(AmazonPaymentException::AMAZON_REJECTED);goto lwQti;ZAASB:if ($r == $this->eccubeConfig['amazon_pay']['api']['error']['invalid_payment_method']) {goto rwje2;}goto FHowK;LHxkN:goto Tad5y;goto DJQ4S;Ikbpy:goto xPZ07;goto MoeRH;nn9kT:vr534:goto EtnYr;rQwh5:KlNP1:goto LHxkN;v9tUW:$order_id .= '_RETRY' . $count;goto VHDW3;VMvjK:return $r;goto CTuPo;qq_lo:throw AmazonPaymentException::create(AmazonPaymentException::INVALID_PAYMENT_METHOD);goto ocKmh;CTuPo:}public function setAmazonOrder(Order $Order, $amazonTradingId){goto gczpe;jFv41:$Order->setReferenceCode($amazonReferenceId);goto Pq2n7;UORR4:$Order->setBillableAmount($billableAmount);goto UCKkc;s0awj:goto CklYZ;goto IXmWA;gczpe:$amazonReferenceId = substr($amazonTradingId, 0, strrpos($amazonTradingId, '-'));goto jFv41;wjEzH:$AmazonTrading->setOrder($Order);goto HtkDy;Sy9_u:$AmazonTrading = new AmazonTrading();goto wjEzH;IeCg0:if ($this->Config->getSale() == $this->eccubeConfig['amazon_pay']['sale']['capture']) {goto adUd3;}goto uiN9V;HtkDy:$AmazonTrading->setTradingCode($amazonTradingId);goto dATxI;eCUTC:CklYZ:goto ZQgdx;dATxI:$AmazonTrading->setAuthoriAmount($payment_total);goto IeCg0;jxUke:if ($this->Config->getSale() == $this->eccubeConfig['amazon_pay']['sale']['capture']) {goto QbfHI;}goto UORR4;Pq2n7:$AmazonStatus = $this->amazonStatusRepository->find($this->Config->getSale());goto N2LlZ;WNH7A:$billableAmount = $payment_total + $this->eccubeConfig['amazon_pay']['max_billable_amount'];goto wa8t_;IXmWA:adUd3:goto jK0Ap;RrSBF:bd1Cg:goto Sy9_u;jK0Ap:$AmazonTrading->setCaptureAmount($payment_total);goto eCUTC;wa8t_:uD4YW:goto jxUke;SN0jy:QbfHI:goto wRLwF;kORpC:if ($payment_total * 0.15 > $this->eccubeConfig['amazon_pay']['max_billable_amount']) {goto Mn_d7;}goto qd0W4;JJlvE:$Order->setPaymentDate(new \DateTime());goto RrSBF;UCKkc:goto bd1Cg;goto SN0jy;W3WQj:goto uD4YW;goto u19Ve;u19Ve:Mn_d7:goto WNH7A;LEXGf:$payment_total = $Order->getPaymentTotal();goto kORpC;wRLwF:$Order->setBillableAmount($billableAmount - $payment_total);goto JJlvE;qd0W4:$billableAmount = floor($payment_total * 1.15);goto W3WQj;zs9hT:$Order->addAmazonTrading($AmazonTrading);goto lnToB;uiN9V:$AmazonTrading->setCaptureAmount(0);goto s0awj;N2LlZ:$Order->setAmazonStatus($AmazonStatus);goto LEXGf;ZQgdx:$AmazonTrading->setRefundCount(0);goto zs9hT;lnToB:}public function registCustomer(Order $Order, $mail_magazine){goto yN5Yo;rlmH1:$Customer->setName01($Order->getName01())->setName02($Order->getName02())->setPostalCode($Order->getPostalCode())->setEmail($Order->getEmail())->setPref($Order->getPref())->setAddr01($Order->getAddr01())->setAddr02($Order->getAddr02())->setPhoneNumber($Order->getPhoneNumber())->setAmazonUserId($profile->user_id);goto eBVSx;Ph9Ym:IXLTO:goto VZaNP;IS9o3:$this->tokenStorage->setToken($token);goto BfB0p;U8SnX:$Customer->setMailmagaFlg(false);goto wBsZE;wtyGn:$this->entityManager->persist($Customer);goto rczQP;yN5Yo:logs('amazon_pay')->info('*** 会員登録処理 start ***');goto aV_sZ;XIuRV:OHvKx:goto sysbl;aV_sZ:$profile = unserialize($this->session->get($this->sessionAmazonProfileKey));goto wX5Kn;eBVSx:if (!$this->pluginRepository->findOneBy(['code' => 'MailMagazine4', 'enabled' => true])) {goto D__eU;}goto JRHLz;IT2Nk:$CustomerStatus = $this->customerStatusRepository->find(CustomerStatus::REGULAR);goto jq12s;JRHLz:if ($mail_magazine) {goto IXLTO;}goto U8SnX;wBsZE:goto OHvKx;goto Ph9Ym;rczQP:$this->entityManager->flush();goto RSEOl;RSEOl:$token = new UsernamePasswordToken($Customer, null, 'customer', ['ROLE_USER']);goto IS9o3;cXBxh:$password = $this->createPassword();goto Isho7;sysbl:D__eU:goto wtyGn;Mc920:return $password;goto kFZ_L;wF7J3:$encoder = $this->encoderFactory->getEncoder($Customer);goto G3Eo2;E5dMb:$secretKey = $this->customerRepository->getUniqueSecretKey();goto Wb7AM;BfB0p:logs('amazon_pay')->info('*** 会員登録処理 end ***');goto Mc920;jq12s:$Customer->setStatus($CustomerStatus);goto rlmH1;G3Eo2:$salt = $encoder->createSalt();goto cXBxh;VZaNP:$Customer->setMailmagaFlg(true);goto XIuRV;wX5Kn:$Customer = $this->customerRepository->newCustomer();goto wF7J3;Wb7AM:$Customer->setSalt($salt)->setPassword($enc_password)->setSecretKey($secretKey)->setPoint(0);goto IT2Nk;Isho7:$enc_password = $encoder->encodePassword($password, $salt);goto E5dMb;kFZ_L:}public function adminRequest($request, $Order){goto OK1zY;FsQCr:$Order->setPaymentDate(new \DateTime());goto CvW6G;DWa7X:if (!$Customer) {goto R5ONU;}goto aalR0;fieYD:vD3bH:goto B4o7c;ry9qF:$this->pointProcessor->rollback($Order, new PurchaseContext());goto S9r1K;cWd5v:$allRefund_flg = true;goto TzLc7;th_3Q:$sumAuthoriAmount = 0;goto CjotB;xSXjJ:$AmazonTradings = $Order->getAmazonTradings();goto yJv9w;TzLc7:apu2w:goto Q4aR6;s0aBS:$resultAmazonTradingInfo = [];goto BQXSJ;kid2W:$billableAmount = $Order->getBillableAmount();goto BhomM;rMfBq:goto apu2w;goto aEY1_;Q4aR6:$cancel_flg = false;goto sWFtm;lEwiY:sf3x0:goto zTpzj;S9r1K:tHF3y:goto HE5z3;sWFtm:$totalRefundAmount = $allRefund_flg ? $payment_total : $sumCaptureAmount - $payment_total;goto s0aBS;S8Omk:$OrderStatus = $this->orderStatusRepository->find($this->orderStatusRepository->find(OrderStatus::CANCEL));goto njY9D;tVq_B:$Order->setOrderStatus($OrderStatus);goto YttqF;b8y0X:wGChv:goto LYR23;yJv9w:$amazon_status = $Order->getAmazonStatus()->getName();goto th_3Q;cAy13:$AmazonStatus = $this->amazonStatusRepository->find(AmazonStatus::CAPTURE);goto c0jRY;ZnArg:kznx6:goto CNenw;xzoKW:VEEb_:goto Bm2Ao;hZnyZ:$Customer = $Order->getCustomer();goto DWa7X;UZMlX:if (!($Order->getOrderStatus()->getId() != $OrderStatus->getId())) {goto iGL7c;}goto IzabS;HE5z3:iGL7c:goto SOSeD;XkO7E:$order_id = $Order->getId();goto Q3ncG;IdmA0:Lyp02:goto e2Dro;e2Dro:$payment_total = (int) $Order->getPaymentTotal();goto kid2W;PtdCY:$amazonErr = "下記のエラーが発生しました。\n {$r} \n";goto qvNVC;kJmGp:iRj2e:goto hZnyZ;zTpzj:if (is_array($r)) {goto wGChv;}goto fIVTg;T4RKL:R5ONU:goto DYFLY;qvNVC:goto bmskI;goto fieYD;OWhpv:$amazonErr = '';goto XkO7E;rQyv3:goto VEEb_;goto b8y0X;c0jRY:goto kznx6;goto x0nMO;IzabS:$this->stockReduceProcessor->rollback($Order, new PurchaseContext());goto xgy3k;Q3ncG:$amazonReferenceId = $Order->getReferenceCode();goto xSXjJ;VDhSg:if (!$Customer) {goto tHF3y;}goto ry9qF;EzzWF:foreach ($AmazonTradings as $AmazonTrading) {goto mCk1s;aQNvZ:Cg3Xz:goto JRVyG;pIweF:$sumCaptureAmount += $AmazonTrading->getCaptureAmount();goto aQNvZ;mCk1s:$sumAuthoriAmount += $AmazonTrading->getAuthoriAmount();goto pIweF;JRVyG:}goto IdmA0;fIVTg:if ($r === false) {goto vD3bH;}goto PtdCY;D1lOy:$this->entityManager->flush();goto xzoKW;CNenw:$Order->setAmazonStatus($AmazonStatus);goto D1lOy;Bm2Ao:return $amazonErr;goto DhssG;CvW6G:$Order->setBillableAmount($billableAmount);goto cAy13;OK1zY:$process = $request == 'capture' ? '売上' : '取消';goto OWhpv;B4o7c:$amazonErr = "下記のエラーが発生しました。\n" . "リクエストを受け付けないため処理を終了しました。\n";goto iYHc8;BhomM:$totalBillingAmount = $payment_total - $sumCaptureAmount;goto quol7;SOSeD:goto AeWmw;goto kJmGp;CjotB:$sumCaptureAmount = 0;goto EzzWF;aalR0:$Customer->setPoint(intval($Customer->getPoint()) - intval($Order->getAddPoint()));goto XqV0J;quol7:if ($request == 'cancel' && $payment_total == $sumCaptureAmount) {goto kNi37;}goto BjHjL;x0nMO:YTk0N:goto S8Omk;aEY1_:kNi37:goto cWd5v;BjHjL:$allRefund_flg = false;goto rMfBq;iYHc8:bmskI:goto rQyv3;YttqF:$AmazonStatus = $this->amazonStatusRepository->find(AmazonStatus::CANCEL);goto ZnArg;njY9D:if ($Order->getOrderStatus()->getId() == OrderStatus::DELIVERED) {goto iRj2e;}goto UZMlX;xgy3k:$Customer = $Order->getCustomer();goto VDhSg;DYFLY:AeWmw:goto tVq_B;LYR23:if ($cancel_flg || $allRefund_flg) {goto YTk0N;}goto FsQCr;XqV0J:$this->pointProcessor->rollback($Order, new PurchaseContext());goto T4RKL;BQXSJ:foreach ($AmazonTradings as $key => $AmazonTrading) {goto x_ckc;UiArf:BzukV:goto Ko2s8;WVoN3:$totalBillingAmount = $totalBillingAmount - $addAmount;goto OregJ;LTqAx:$prefix = $key != 0 ? 'ADD_' . $key . '_' : '';goto Y2K8W;dG5z3:if ($amazon_status == 'オーソリ') {goto o1u2k;}goto l9iU3;u50Np:$AmazonTrading = $AmazonTrading;goto GJ2Te;jUZYI:lOLJn:goto PYQ1Y;XXGDX:rBqIK:goto NZE10;dxFe5:$newAmazonTrading->setOrder($Order);goto uqkD5;c75fm:$addAmount = $payment_total - $sumAuthoriAmount;goto OGClo;EEERg:$r = $this->amazonRequestService->authorize($amazonReferenceId, 'ADD_' . count($AmazonTradings) . '_' . $order_id, $addAmount);goto gmiTo;PYVZ7:if ($request == 'capture') {goto lOLJn;}goto NhiJn;mQDlM:if (!($payment_total > $sumAuthoriAmount && $amazon_status == 'オーソリ' || $totalBillingAmount > 0 && $amazon_status == '売上')) {goto s9q2o;}goto dG5z3;cw4ft:$billableAmount = $billableAmount - $billingAmount;goto PWWkx;LiE22:goto sf3x0;goto UiArf;GJ2Te:$r = false;goto C5lJg;UQV3y:$r = $this->amazonRequestService->cancelOrderReference($amazonReferenceId);goto wyGWC;EKgOf:$this->entityManager->persist($newAmazonTrading);goto XKjiF;PWWkx:goto wCoYC;goto ncJaf;OGClo:gZhcG:goto EEERg;xv3SS:$newAmazonTrading->setRefundCount(0);goto uDdAI;NBxpt:logs('amazon_pay')->error('aws request error from admin_order r=' . var_export($r, true));goto LiE22;VMmHC:sqEYQ:goto F4irv;qED5Q:if (!($r === false)) {goto nhH4g;}goto wjppn;uDdAI:$Order->addAmazonTrading($newAmazonTrading);goto EKgOf;jhWo8:$AmazonTrading->setCaptureAmount($captureAmount - $refundAmount);goto PQPgO;HYjBp:$totalRefundAmount = $totalRefundAmount - $refundAmount;goto aXy7V;PQPgO:$AmazonTrading->setRefundCount($refundCount);goto gb7X3;F4irv:goto G2u6l;goto XXGDX;gmiTo:if (!($r === false && $r === 'status_failed')) {goto Ze8KV;}goto QVYxT;GSjTM:nhH4g:goto wd5zE;KAu8B:o1u2k:goto c75fm;CfZEt:$captureAmount = $AmazonTrading->getCaptureAmount();goto e_kRP;e_kRP:$refundCount = $AmazonTrading->getRefundCount();goto PYVZ7;aXy7V:goto rBqIK;goto VMmHC;xuXe6:$amazonCaptureId = substr_replace($amazonTradingId, 'C', strrpos($amazonTradingId, 'A'), 1);goto f1YjX;gRBEZ:MTlNQ:goto UQV3y;l9iU3:$addAmount = $totalBillingAmount;goto lfFi7;gb7X3:$this->entityManager->flush($AmazonTrading);goto HYjBp;uqkD5:$newAmazonTrading->setTradingCode($newAmazonAuthorizeId);goto ZGfob;DrsSQ:bxaPg:goto GpF86;YQhwH:$authoriAmount = $AmazonTrading->getAuthoriAmount();goto CfZEt;QVYxT:logs('amazon_pay')->error('aws request error from admin_order r=' . var_export($r, true));goto UTDJr;mHQwz:$r = $this->amazonRequestService->capture($newAmazonAuthorizeId, 'ADD_' . count($AmazonTradings) . '_' . $order_id, $addAmount);goto UFVvV;ncJaf:m2K4k:goto u50Np;UFVvV:if (!($r === false)) {goto BzukV;}goto NBxpt;qI9TH:$billingAmount = $authoriAmount > $totalBillingAmount ? $totalBillingAmount : $authoriAmount;goto GcuIP;NZE10:goto wZ5fi;goto gRBEZ;epuyW:if ($totalRefundAmount == 0) {goto sqEYQ;}goto LTqAx;XKjiF:$this->entityManager->flush($newAmazonTrading);goto WVoN3;gbYd9:$r = $this->amazonRequestService->refund($amazonCaptureId, $prefix . $refundCount . '_' . $order_id, $refundAmount);goto AbUlG;PtYJn:s9q2o:goto DrsSQ;ZGfob:$newAmazonTrading->setAuthoriAmount($addAmount);goto AxkBw;wjppn:logs('amazon_pay')->error('aws request error from admin_order r=' . var_export($r, true));goto LcZLc;OregJ:$billableAmount = $billableAmount - $addAmount;goto PtYJn;x_ckc:$amazonTradingId = $AmazonTrading->getTradingCode();goto YQhwH;AbUlG:if (!($r === false)) {goto lSIuv;}goto k19op;UTDJr:goto sf3x0;goto G5WmK;GpF86:G2u6l:goto pYSqe;G5WmK:Ze8KV:goto gWmYw;AxkBw:$newAmazonTrading->setCaptureamount($addAmount);goto xv3SS;ikOHT:$r = $this->amazonRequestService->capture($amazonAuthorizationId, $order_id, $billingAmount);goto qED5Q;f1YjX:$refundCount = $refundCount + 1;goto gbYd9;at9CX:$this->entityManager->flush($AmazonTrading);goto D8Pcv;s9bj4:wZ5fi:goto e1j1S;LcZLc:goto sf3x0;goto GSjTM;Y2K8W:$refundAmount = $captureAmount > $totalRefundAmount ? $totalRefundAmount : $captureAmount;goto xuXe6;C5lJg:wCoYC:goto mQDlM;lfFi7:goto gZhcG;goto KAu8B;Ko2s8:$newAmazonTrading = new AmazonTrading();goto dxFe5;wd5zE:$AmazonTrading->setCaptureAmount($billingAmount);goto at9CX;PYQ1Y:if ($captureAmount > 0 || $totalBillingAmount == 0) {goto m2K4k;}goto qI9TH;wyGWC:$cancel_flg = true;goto s9bj4;NhiJn:if ($sumCaptureAmount == 0) {goto MTlNQ;}goto epuyW;D8Pcv:$totalBillingAmount = $totalBillingAmount - $billingAmount;goto cw4ft;gWmYw:$newAmazonAuthorizeId = $this->amazonRequestService->sfGetXMLTagValue($r, 'AMAZONAUTHORIZATIONID');goto mHQwz;k19op:logs('amazon_pay')->error('aws request error from admin_order r = ' . var_export($r, true));goto s8bXK;t3tPV:lSIuv:goto jhWo8;GcuIP:$amazonAuthorizationId = $amazonTradingId;goto ikOHT;e1j1S:goto bxaPg;goto jUZYI;s8bXK:goto sf3x0;goto t3tPV;pYSqe:}goto lEwiY;DhssG:}public function createPassword($length = 8){goto xw85f;til7w:return implode($pwd);goto rm78g;dkrWy:$pwd[] = $pwd_strings[$key][array_rand($pwd_strings[$key])];goto dr0Pb;uVDjh:$pwd_strings = ["sletter" => range('a', 'z'), "cletter" => range('A', 'Z'), "number" => range('0', '9')];goto qat4c;xw85f:$pwd = [];goto uVDjh;bLXNo:if (!(count($pwd) < $length)) {goto PFroT;}goto eQ9v3;eQ9v3:$key = array_rand($pwd_strings);goto dkrWy;qat4c:n8r8a:goto bLXNo;HY6b8:PFroT:goto Ba6qn;dr0Pb:goto n8r8a;goto HY6b8;Ba6qn:shuffle($pwd);goto til7w;rm78g:}}