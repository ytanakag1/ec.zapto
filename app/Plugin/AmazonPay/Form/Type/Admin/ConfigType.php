<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.3   |
    |              on 2020-11-16 14:57:02              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
namespace Plugin\AmazonPay\Form\Type\Admin;use Eccube\Common\EccubeConfig;use Plugin\AmazonPay\Entity\Config;use Symfony\Component\Form\AbstractType;use Symfony\Component\Form\Extension\Core\Type\TextType;use Symfony\Component\Form\Extension\Core\Type\ChoiceType;use Symfony\Component\Form\Extension\Core\Type\TextareaType;use Symfony\Component\Form\FormBuilderInterface;use Symfony\Component\OptionsResolver\OptionsResolver;use Symfony\Component\Validator\Constraints as Assert;use Symfony\Component\Validator\Context\ExecutionContextInterface;class ConfigType extends AbstractType{protected $eccubeConfig;public function __construct(EccubeConfig $eccubeConfig){$this->eccubeConfig = $eccubeConfig;}public function buildForm(FormBuilderInterface $builder, array $options){$builder->add('amazon_account_mode', ChoiceType::class, ['choices' => ['共用アカウント(アイピーロジック配布)' => $this->eccubeConfig['amazon_pay']['account_mode']['shared'], '自社契約アカウント' => $this->eccubeConfig['amazon_pay']['account_mode']['owned']], 'constraints' => [new Assert\NotBlank(['message' => '※ アカウント切り替えが選択されていません。'])], 'multiple' => false, 'expanded' => true])->add('env', ChoiceType::class, ['choices' => ['テスト環境' => $this->eccubeConfig['amazon_pay']['env']['sandbox'], '本番環境' => $this->eccubeConfig['amazon_pay']['env']['prod']], 'multiple' => false, 'expanded' => true])->add('seller_id', TextType::class, ['required' => false, 'constraints' => [new Assert\Callback(function ($objcet, ExecutionContextInterface $context) {goto fvoXr;lEcqm:FGvgW:goto AzG52;kFA6R:if (!($mode == $this->eccubeConfig['amazon_pay']['account_mode']['owned'] && !$objcet)) {goto FGvgW;}goto GCKP_;GCKP_:$context->buildViolation('※ 出品者IDが入力されていません。')->atPath('seller_id')->addViolation();goto lEcqm;fvoXr:$mode = $context->getRoot()->get('amazon_account_mode')->getData();goto kFA6R;AzG52:}), new Assert\Length(['max' => $this->eccubeConfig['eccube_stext_len']])]])->add('mws_access_key_id', TextType::class, ['required' => false, 'constraints' => [new Assert\Callback(function ($objcet, ExecutionContextInterface $context) {goto DDoyg;LYvBi:cv7De:goto IcHIk;DDoyg:$mode = $context->getRoot()->get('amazon_account_mode')->getData();goto rb0hy;NUk0H:$context->buildViolation('※ アクセスキーが入力されていません。')->atPath('mws_access_key_id')->addViolation();goto LYvBi;rb0hy:if (!($mode == $this->eccubeConfig['amazon_pay']['account_mode']['owned'] && !$objcet)) {goto cv7De;}goto NUk0H;IcHIk:}), new Assert\Length(['max' => $this->eccubeConfig['eccube_stext_len']])]])->add('mws_secret_access_key', TextType::class, ['required' => false, 'constraints' => [new Assert\Callback(function ($objcet, ExecutionContextInterface $context) {goto n44NQ;MzAOa:if (!($mode == $this->eccubeConfig['amazon_pay']['account_mode']['owned'] && !$objcet)) {goto VDv98;}goto dSx8y;rOX9h:VDv98:goto BYKVJ;dSx8y:$context->buildViolation('※ シークレットアクセスキーが入力されていません。')->atPath('mws_secret_access_key')->addViolation();goto rOX9h;n44NQ:$mode = $context->getRoot()->get('amazon_account_mode')->getData();goto MzAOa;BYKVJ:}), new Assert\Length(['max' => $this->eccubeConfig['eccube_smtext_len']])]])->add('client_id', TextType::class, ['required' => false, 'constraints' => [new Assert\Callback(function ($objcet, ExecutionContextInterface $context) {goto qVygU;qVygU:$mode = $context->getRoot()->get('amazon_account_mode')->getData();goto t1VHx;vhP0f:$context->buildViolation('※ クライアントIDが入力されていません。')->atPath('mws_secret_access_key')->addViolation();goto IfFWz;t1VHx:if (!($mode == $this->eccubeConfig['amazon_pay']['account_mode']['owned'] && !$objcet)) {goto ShDgl;}goto vhP0f;IfFWz:ShDgl:goto H92A2;H92A2:}), new Assert\Length(['max' => $this->eccubeConfig['eccube_smtext_len']])]])->add('test_client_id', TextType::class, ['required' => false, 'constraints' => [new Assert\Callback(function ($objcet, ExecutionContextInterface $context) {goto YXx0W;n96oj:PW5so:goto rJdrT;YXx0W:$mode = $context->getRoot()->get('amazon_account_mode')->getData();goto VdP6H;DiA1R:$context->buildViolation('※ テスト用クライアントIDが入力されていません。')->atPath('mws_secret_access_key')->addViolation();goto n96oj;VdP6H:if (!($mode == $this->eccubeConfig['amazon_pay']['account_mode']['shared'] && !$objcet)) {goto PW5so;}goto DiA1R;rJdrT:}), new Assert\Length(['max' => $this->eccubeConfig['eccube_smtext_len']])]])->add('prod_key', TextType::class, ['required' => false, 'constraints' => [new Assert\Length(['max' => $this->eccubeConfig['eccube_smtext_len']])]])->add('sale', ChoiceType::class, ['choices' => ['仮売上' => $this->eccubeConfig['amazon_pay']['sale']['authori'], '売上' => $this->eccubeConfig['amazon_pay']['sale']['capture']], 'constraints' => [new Assert\NotBlank(['message' => '※ 仮売上 or 売上が選択されていません。'])], 'multiple' => false, 'expanded' => true])->add('use_confirm_page', ChoiceType::class, ['choices' => ['表示' => $this->eccubeConfig['amazon_pay']['toggle']['on'], '非表示' => $this->eccubeConfig['amazon_pay']['toggle']['off']], 'constraints' => [new Assert\NotBlank(['message' => '※ 決済確認画面が選択されていません。'])], 'multiple' => false, 'expanded' => true])->add('auto_login', ChoiceType::class, ['choices' => ['オン' => $this->eccubeConfig['amazon_pay']['toggle']['on'], 'オフ' => $this->eccubeConfig['amazon_pay']['toggle']['off']], 'constraints' => [new Assert\NotBlank(['message' => '※ 自動ログインが選択されていません。'])], 'multiple' => false, 'expanded' => true])->add('login_required', ChoiceType::class, ['choices' => ['オン' => $this->eccubeConfig['amazon_pay']['toggle']['on'], 'オフ' => $this->eccubeConfig['amazon_pay']['toggle']['off']], 'constraints' => [new Assert\NotBlank(['message' => '※ ログイン・会員登録必須が選択されていません。'])], 'multiple' => false, 'expanded' => true])->add('order_correct', ChoiceType::class, ['choices' => ['オン' => $this->eccubeConfig['amazon_pay']['toggle']['on'], 'オフ' => $this->eccubeConfig['amazon_pay']['toggle']['off']], 'constraints' => [new Assert\NotBlank(['message' => '※ 受注補正機能が選択されていません。'])], 'multiple' => false, 'expanded' => true])->add('mail_notices', TextareaType::class, ['required' => false, 'constraints' => [new Assert\Length(['max' => $this->eccubeConfig['eccube_ltext_len']])]])->add('use_cart_button', ChoiceType::class, ['choices' => ['オン' => $this->eccubeConfig['amazon_pay']['toggle']['on'], 'オフ' => $this->eccubeConfig['amazon_pay']['toggle']['off']], 'constraints' => [new Assert\NotBlank(['message' => '※ Amazonボタン設置(カート画面)が選択されていません。'])], 'multiple' => false, 'expanded' => true])->add('cart_button_color', ChoiceType::class, ['choices' => ['ゴールド' => 'Gold', 'ダークグレー' => 'DarkGray', 'ライトグレー' => 'LightGray'], 'constraints' => [new Assert\NotBlank(['message' => '※ Amazonログインボタンカラー(カート)が選択されていません。'])], 'multiple' => false, 'expanded' => true])->add('cart_button_size', ChoiceType::class, ['choices' => ['小' => 'small', '中' => 'medium', '大' => 'large', '特大' => 'x-large'], 'constraints' => [new Assert\NotBlank(['message' => '※ Amazonログインボタンサイズ(カート)が選択されていません。'])], 'multiple' => false, 'expanded' => true])->add('cart_button_place', ChoiceType::class, ['choices' => ['自動' => $this->eccubeConfig['amazon_pay']['button_place']['auto'], '手動' => $this->eccubeConfig['amazon_pay']['button_place']['manual']], 'constraints' => [new Assert\NotBlank(['message' => '※ Amazonログインボタン配置(カート画面)が選択されていません。'])], 'multiple' => false, 'expanded' => true])->add('use_products_button', ChoiceType::class, ['choices' => ['オン' => $this->eccubeConfig['amazon_pay']['toggle']['on'], 'オフ' => $this->eccubeConfig['amazon_pay']['toggle']['off']], 'constraints' => [new Assert\NotBlank(['message' => '※ Amazonボタン設置(商品詳細画面)が選択されていません。'])], 'multiple' => false, 'expanded' => true])->add('products_button_color', ChoiceType::class, ['choices' => ['ゴールド' => 'Gold', 'ダークグレー' => 'DarkGray', 'ライトグレー' => 'LightGray'], 'constraints' => [new Assert\NotBlank(['message' => '※ Amazonログインボタンカラー(商品詳細)が選択されていません。'])], 'multiple' => false, 'expanded' => true])->add('products_button_size', ChoiceType::class, ['choices' => ['小' => 'small', '中' => 'medium', '大' => 'large', '特大' => 'x-large'], 'constraints' => [new Assert\NotBlank(['message' => '※ Amazonログインボタンサイズ(商品詳細)が選択されていません。'])], 'multiple' => false, 'expanded' => true])->add('products_button_place', ChoiceType::class, ['choices' => ['自動' => $this->eccubeConfig['amazon_pay']['button_place']['auto'], '手動' => $this->eccubeConfig['amazon_pay']['button_place']['manual']], 'constraints' => [new Assert\NotBlank(['message' => '※ Amazonログインボタン配置(商品詳細)が選択されていません。'])], 'multiple' => false, 'expanded' => true])->add('use_mypage_change_button', ChoiceType::class, ['choices' => ['オン' => $this->eccubeConfig['amazon_pay']['toggle']['on'], 'オフ' => $this->eccubeConfig['amazon_pay']['toggle']['off']], 'constraints' => [new Assert\NotBlank(['message' => '※ Amazonログインボタン設置(マイページ/会員情報編集画面)が選択されていません。'])], 'multiple' => false, 'expanded' => true])->add('mypage_change_button_color', ChoiceType::class, ['choices' => ['ゴールド' => 'Gold', 'ダークグレー' => 'DarkGray', 'ライトグレー' => 'LightGray'], 'constraints' => [new Assert\NotBlank(['message' => '※ Amazonログインボタンカラー(マイページ/会員情報編集画面)が選択されていません。'])], 'multiple' => false, 'expanded' => true])->add('mypage_change_button_size', ChoiceType::class, ['choices' => ['小' => 'small', '中' => 'medium', '大' => 'large', '特大' => 'x-large'], 'constraints' => [new Assert\NotBlank(['message' => '※ Amazonログインボタンサイズ(マイページ/会員情報編集画面)が選択されていません。'])], 'multiple' => false, 'expanded' => true])->add('mypage_change_button_place', ChoiceType::class, ['choices' => ['自動' => $this->eccubeConfig['amazon_pay']['button_place']['auto'], '手動' => $this->eccubeConfig['amazon_pay']['button_place']['manual']], 'constraints' => [new Assert\NotBlank(['message' => '※ Amazonログインボタン配置(マイページ/会員情報編集画面)が選択されていません。'])], 'multiple' => false, 'expanded' => true])->add('use_mypage_login_button', ChoiceType::class, ['choices' => ['オン' => $this->eccubeConfig['amazon_pay']['toggle']['on'], 'オフ' => $this->eccubeConfig['amazon_pay']['toggle']['off']], 'constraints' => [new Assert\NotBlank(['message' => '※ Amazonログインボタン設置(ログイン画面(マイページ))が選択されていません。'])], 'multiple' => false, 'expanded' => true])->add('mypage_login_button_color', ChoiceType::class, ['choices' => ['ゴールド' => 'Gold', 'ダークグレー' => 'DarkGray', 'ライトグレー' => 'LightGray'], 'constraints' => [new Assert\NotBlank(['message' => '※ Amazonログインボタンカラー(ログイン画面(マイページ))が選択されていません。'])], 'multiple' => false, 'expanded' => true])->add('mypage_login_button_size', ChoiceType::class, ['choices' => ['小' => 'small', '中' => 'medium', '大' => 'large', '特大' => 'x-large'], 'constraints' => [new Assert\NotBlank(['message' => '※ Amazonログインボタンサイズ(ログイン画面(マイページ))が選択されていません。'])], 'multiple' => false, 'expanded' => true])->add('mypage_login_button_place', ChoiceType::class, ['choices' => ['自動' => $this->eccubeConfig['amazon_pay']['button_place']['auto'], '手動' => $this->eccubeConfig['amazon_pay']['button_place']['manual']], 'constraints' => [new Assert\NotBlank(['message' => '※ Amazonログインボタン配置(ログイン画面(マイページ))が選択されていません。'])], 'multiple' => false, 'expanded' => true])->add('deliv_widget_height', TextType::class, ['required' => false, 'constraints' => [new Assert\NotBlank(['message' => '※ お届け先ウィジェットサイズ(縦)が入力されていません。']), new Assert\GreaterThanOrEqual(['value' => 228]), new Assert\LessThanOrEqual(['value' => 400])]])->add('deliv_widget_width', TextType::class, ['required' => false, 'constraints' => [new Assert\NotBlank(['message' => '※ 届け先ウィジェットサイズ(横)が入力されていません。']), new Assert\GreaterThanOrEqual(['value' => 300]), new Assert\LessThanOrEqual(['value' => 600])]])->add('payment_widget_height', TextType::class, ['required' => false, 'constraints' => [new Assert\NotBlank(['message' => '※ お支払いウィジェットサイズ(縦)が入力されていません。']), new Assert\GreaterThanOrEqual(['value' => 228]), new Assert\LessThanOrEqual(['value' => 400])]])->add('payment_widget_width', TextType::class, ['required' => false, 'constraints' => [new Assert\NotBlank(['message' => '※ お支払いウィジェットサイズ(横)が入力されていません。']), new Assert\GreaterThanOrEqual(['value' => 300]), new Assert\LessThanOrEqual(['value' => 600])]]);}public function configureOptions(OptionsResolver $resolver){$resolver->setDefaults(['data_class' => Config::class]);}}